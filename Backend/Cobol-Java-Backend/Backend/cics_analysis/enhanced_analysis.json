{
  "analysis_results": {
    "rag_results": {
      "files": {
        "cobol_code.cbl": {
          "filename": "cobol_code.cbl",
          "file_type": "cobol_program",
          "size": 23797,
          "lines": 626,
          "program_id": "DBCONNECT",
          "divisions": [
            {
              "name": "IDENTIFICATION",
              "line": 9
            },
            {
              "name": "ENVIRONMENT",
              "line": 12
            },
            {
              "name": "DATA",
              "line": 17
            },
            {
              "name": "PROCEDURE",
              "line": 121
            }
          ],
          "data_items": [
            {
              "name": "WS-EMPLOYEE-RECORD",
              "line": 32,
              "pic": null,
              "java_type": "String"
            },
            {
              "name": "WS-DB-CONNECTION",
              "line": 44,
              "pic": null,
              "java_type": "String"
            },
            {
              "name": "WS-FLAGS",
              "line": 50,
              "pic": null,
              "java_type": "String"
            },
            {
              "name": "WS-COUNTERS",
              "line": 56,
              "pic": null,
              "java_type": "String"
            },
            {
              "name": "WS-ERROR-HANDLING",
              "line": 62,
              "pic": null,
              "java_type": "String"
            },
            {
              "name": "WS-SEARCH-CRITERIA",
              "line": 67,
              "pic": null,
              "java_type": "String"
            },
            {
              "name": "WS-USER-INPUT",
              "line": 71,
              "pic": null,
              "java_type": "String"
            },
            {
              "name": "WS-DISPLAY-VARIABLES",
              "line": 75,
              "pic": null,
              "java_type": "String"
            },
            {
              "name": "HV-EMP-ID",
              "line": 86,
              "pic": "9(",
              "java_type": "Integer"
            },
            {
              "name": "HV-EMP-FIRST-NAME",
              "line": 87,
              "pic": "X(",
              "java_type": "String"
            },
            {
              "name": "HV-EMP-LAST-NAME",
              "line": 88,
              "pic": "X(",
              "java_type": "String"
            },
            {
              "name": "HV-EMP-DEPT",
              "line": 89,
              "pic": "X(",
              "java_type": "String"
            },
            {
              "name": "HV-EMP-POSITION",
              "line": 90,
              "pic": "X(",
              "java_type": "String"
            },
            {
              "name": "HV-EMP-SALARY",
              "line": 91,
              "pic": "9(",
              "java_type": "Integer"
            },
            {
              "name": "HV-EMP-HIRE-DATE",
              "line": 92,
              "pic": "X(",
              "java_type": "String"
            },
            {
              "name": "HV-DB-USER",
              "line": 93,
              "pic": "X(",
              "java_type": "String"
            },
            {
              "name": "HV-DB-PASSWORD",
              "line": 94,
              "pic": "X(",
              "java_type": "String"
            },
            {
              "name": "HV-SEARCH-DEPT",
              "line": 95,
              "pic": "X(",
              "java_type": "String"
            },
            {
              "name": "HV-MIN-SALARY",
              "line": 96,
              "pic": "9(",
              "java_type": "Integer"
            }
          ],
          "dependencies": {
            "copy_books": [],
            "called_programs": [],
            "file_references": [
              "EMP",
              "EMP",
              "FIRST",
              "FIRST"
            ],
            "vsam_files": [],
            "jcl_references": []
          },
          "business_logic": [
            {
              "line": 9,
              "statement": "IDENTIFICATION DIVISION.",
              "type": "OTHER"
            },
            {
              "line": 14,
              "statement": "SOURCE-COMPUTER. IBM-PC.",
              "type": "OTHER"
            },
            {
              "line": 15,
              "statement": "OBJECT-COMPUTER. IBM-PC.",
              "type": "OTHER"
            },
            {
              "line": 130,
              "statement": "PERFORM 1000-INITIALIZE.",
              "type": "PERFORM"
            },
            {
              "line": 132,
              "statement": "IF DB-CONNECTED",
              "type": "IF"
            },
            {
              "line": 133,
              "statement": "PERFORM 2000-PROCESS-USER-CHOICE",
              "type": "PERFORM"
            },
            {
              "line": 135,
              "statement": "END-IF.",
              "type": "OTHER"
            },
            {
              "line": 137,
              "statement": "PERFORM 9000-TERMINATE.",
              "type": "PERFORM"
            },
            {
              "line": 149,
              "statement": "MOVE \"N\" TO WS-END-OF-DATA.",
              "type": "MOVE"
            },
            {
              "line": 150,
              "statement": "MOVE \"N\" TO WS-DB-CONNECTED.",
              "type": "MOVE"
            },
            {
              "line": 152,
              "statement": "PERFORM 1100-CONNECT-TO-DB.",
              "type": "PERFORM"
            },
            {
              "line": 161,
              "statement": "MOVE WS-DB-USER TO HV-DB-USER.",
              "type": "MOVE"
            },
            {
              "line": 162,
              "statement": "MOVE WS-DB-PASSWORD TO HV-DB-PASSWORD.",
              "type": "MOVE"
            },
            {
              "line": 170,
              "statement": "PERFORM 8000-CHECK-SQL-STATUS.",
              "type": "PERFORM"
            },
            {
              "line": 172,
              "statement": "IF SQLCODE = 0",
              "type": "IF"
            },
            {
              "line": 173,
              "statement": "MOVE \"Y\" TO WS-DB-CONNECTED",
              "type": "MOVE"
            },
            {
              "line": 179,
              "statement": "END-IF.",
              "type": "OTHER"
            },
            {
              "line": 185,
              "statement": "PERFORM 2100-DISPLAY-MENU.",
              "type": "PERFORM"
            },
            {
              "line": 190,
              "statement": "PERFORM 3000-RETRIEVE-ALL-EMPLOYEES",
              "type": "PERFORM"
            },
            {
              "line": 192,
              "statement": "PERFORM 3100-RETRIEVE-BY-CRITERIA",
              "type": "PERFORM"
            },
            {
              "line": 194,
              "statement": "PERFORM 4000-INSERT-EMPLOYEE",
              "type": "PERFORM"
            },
            {
              "line": 196,
              "statement": "PERFORM 5000-UPDATE-EMPLOYEE",
              "type": "PERFORM"
            },
            {
              "line": 198,
              "statement": "PERFORM 6000-DELETE-EMPLOYEE",
              "type": "PERFORM"
            },
            {
              "line": 200,
              "statement": "MOVE \"N\" TO WS-CONTINUE-CHOICE",
              "type": "MOVE"
            },
            {
              "line": 205,
              "statement": "IF WS-CONTINUE-CHOICE NOT = \"N\" AND WS-OPERATION-CHOICE NOT = 9",
              "type": "IF"
            },
            {
              "line": 207,
              "statement": "DISPLAY \"Do you want to perform another operation? (Y/N)\"",
              "type": "OTHER"
            },
            {
              "line": 209,
              "statement": "END-IF.",
              "type": "OTHER"
            },
            {
              "line": 236,
              "statement": "MOVE \"N\" TO WS-END-OF-DATA.",
              "type": "MOVE"
            },
            {
              "line": 242,
              "statement": "PERFORM 8000-CHECK-SQL-STATUS.",
              "type": "PERFORM"
            },
            {
              "line": 244,
              "statement": "IF SQLCODE = 0",
              "type": "IF"
            },
            {
              "line": 248,
              "statement": "PERFORM 3050-FETCH-EMPLOYEE-RECORD",
              "type": "PERFORM"
            },
            {
              "line": 257,
              "statement": "END-IF.",
              "type": "OTHER"
            },
            {
              "line": 274,
              "statement": "IF SQLCODE = 0",
              "type": "IF"
            },
            {
              "line": 277,
              "statement": "MOVE HV-EMP-SALARY TO WS-FORMATTED-SALARY",
              "type": "MOVE"
            },
            {
              "line": 286,
              "statement": "IF SQLCODE = 100",
              "type": "IF"
            },
            {
              "line": 287,
              "statement": "MOVE \"Y\" TO WS-END-OF-DATA",
              "type": "MOVE"
            },
            {
              "line": 289,
              "statement": "PERFORM 8000-CHECK-SQL-STATUS",
              "type": "PERFORM"
            },
            {
              "line": 290,
              "statement": "END-IF",
              "type": "OTHER"
            },
            {
              "line": 291,
              "statement": "END-IF.",
              "type": "OTHER"
            },
            {
              "line": 307,
              "statement": "MOVE WS-SEARCH-DEPT TO HV-SEARCH-DEPT.",
              "type": "MOVE"
            },
            {
              "line": 308,
              "statement": "MOVE WS-SEARCH-MIN-SALARY TO HV-MIN-SALARY.",
              "type": "MOVE"
            },
            {
              "line": 311,
              "statement": "MOVE \"N\" TO WS-END-OF-DATA.",
              "type": "MOVE"
            },
            {
              "line": 317,
              "statement": "PERFORM 8000-CHECK-SQL-STATUS.",
              "type": "PERFORM"
            },
            {
              "line": 319,
              "statement": "IF SQLCODE = 0",
              "type": "IF"
            },
            {
              "line": 323,
              "statement": "PERFORM 3150-FETCH-DEPT-RECORD",
              "type": "PERFORM"
            },
            {
              "line": 332,
              "statement": "END-IF.",
              "type": "OTHER"
            },
            {
              "line": 349,
              "statement": "IF SQLCODE = 0",
              "type": "IF"
            },
            {
              "line": 352,
              "statement": "MOVE HV-EMP-SALARY TO WS-FORMATTED-SALARY",
              "type": "MOVE"
            },
            {
              "line": 361,
              "statement": "IF SQLCODE = 100",
              "type": "IF"
            },
            {
              "line": 362,
              "statement": "MOVE \"Y\" TO WS-END-OF-DATA",
              "type": "MOVE"
            },
            {
              "line": 364,
              "statement": "PERFORM 8000-CHECK-SQL-STATUS",
              "type": "PERFORM"
            },
            {
              "line": 365,
              "statement": "END-IF",
              "type": "OTHER"
            },
            {
              "line": 366,
              "statement": "END-IF.",
              "type": "OTHER"
            },
            {
              "line": 397,
              "statement": "MOVE WS-EMP-ID TO HV-EMP-ID.",
              "type": "MOVE"
            },
            {
              "line": 398,
              "statement": "MOVE WS-EMP-FIRST-NAME TO HV-EMP-FIRST-NAME.",
              "type": "MOVE"
            },
            {
              "line": 399,
              "statement": "MOVE WS-EMP-LAST-NAME TO HV-EMP-LAST-NAME.",
              "type": "MOVE"
            },
            {
              "line": 400,
              "statement": "MOVE WS-EMP-DEPT TO HV-EMP-DEPT.",
              "type": "MOVE"
            },
            {
              "line": 401,
              "statement": "MOVE WS-EMP-POSITION TO HV-EMP-POSITION.",
              "type": "MOVE"
            },
            {
              "line": 402,
              "statement": "MOVE WS-EMP-SALARY TO HV-EMP-SALARY.",
              "type": "MOVE"
            },
            {
              "line": 403,
              "statement": "MOVE WS-EMP-HIRE-DATE TO HV-EMP-HIRE-DATE.",
              "type": "MOVE"
            },
            {
              "line": 415,
              "statement": "PERFORM 8000-CHECK-SQL-STATUS.",
              "type": "PERFORM"
            },
            {
              "line": 417,
              "statement": "IF SQLCODE = 0",
              "type": "IF"
            },
            {
              "line": 429,
              "statement": "END-IF.",
              "type": "OTHER"
            },
            {
              "line": 442,
              "statement": "MOVE WS-EMP-ID TO HV-EMP-ID.",
              "type": "MOVE"
            },
            {
              "line": 454,
              "statement": "PERFORM 8000-CHECK-SQL-STATUS.",
              "type": "PERFORM"
            },
            {
              "line": 456,
              "statement": "IF SQLCODE = 0",
              "type": "IF"
            },
            {
              "line": 457,
              "statement": "MOVE HV-EMP-FIRST-NAME TO WS-EMP-FIRST-NAME",
              "type": "MOVE"
            },
            {
              "line": 458,
              "statement": "MOVE HV-EMP-LAST-NAME TO WS-EMP-LAST-NAME",
              "type": "MOVE"
            },
            {
              "line": 459,
              "statement": "MOVE HV-EMP-DEPT TO WS-EMP-DEPT",
              "type": "MOVE"
            },
            {
              "line": 460,
              "statement": "MOVE HV-EMP-POSITION TO WS-EMP-POSITION",
              "type": "MOVE"
            },
            {
              "line": 461,
              "statement": "MOVE HV-EMP-SALARY TO WS-EMP-SALARY",
              "type": "MOVE"
            },
            {
              "line": 462,
              "statement": "MOVE HV-EMP-HIRE-DATE TO WS-EMP-HIRE-DATE",
              "type": "MOVE"
            },
            {
              "line": 477,
              "statement": "IF WS-EMP-DEPT = SPACES",
              "type": "IF"
            },
            {
              "line": 478,
              "statement": "MOVE HV-EMP-DEPT TO WS-EMP-DEPT",
              "type": "MOVE"
            },
            {
              "line": 479,
              "statement": "END-IF",
              "type": "OTHER"
            },
            {
              "line": 483,
              "statement": "IF WS-EMP-POSITION = SPACES",
              "type": "IF"
            },
            {
              "line": 484,
              "statement": "MOVE HV-EMP-POSITION TO WS-EMP-POSITION",
              "type": "MOVE"
            },
            {
              "line": 485,
              "statement": "END-IF",
              "type": "OTHER"
            },
            {
              "line": 489,
              "statement": "IF WS-EMP-SALARY = ZEROES",
              "type": "IF"
            },
            {
              "line": 490,
              "statement": "MOVE HV-EMP-SALARY TO WS-EMP-SALARY",
              "type": "MOVE"
            },
            {
              "line": 491,
              "statement": "END-IF",
              "type": "OTHER"
            },
            {
              "line": 493,
              "statement": "MOVE WS-EMP-DEPT TO HV-EMP-DEPT",
              "type": "MOVE"
            },
            {
              "line": 494,
              "statement": "MOVE WS-EMP-POSITION TO HV-EMP-POSITION",
              "type": "MOVE"
            },
            {
              "line": 495,
              "statement": "MOVE WS-EMP-SALARY TO HV-EMP-SALARY",
              "type": "MOVE"
            },
            {
              "line": 505,
              "statement": "PERFORM 8000-CHECK-SQL-STATUS",
              "type": "PERFORM"
            },
            {
              "line": 507,
              "statement": "IF SQLCODE = 0",
              "type": "IF"
            },
            {
              "line": 519,
              "statement": "END-IF",
              "type": "OTHER"
            },
            {
              "line": 521,
              "statement": "IF SQLCODE = 100",
              "type": "IF"
            },
            {
              "line": 524,
              "statement": "PERFORM 8000-CHECK-SQL-STATUS",
              "type": "PERFORM"
            },
            {
              "line": 525,
              "statement": "END-IF",
              "type": "OTHER"
            },
            {
              "line": 526,
              "statement": "END-IF.",
              "type": "OTHER"
            },
            {
              "line": 539,
              "statement": "MOVE WS-EMP-ID TO HV-EMP-ID.",
              "type": "MOVE"
            },
            {
              "line": 548,
              "statement": "PERFORM 8000-CHECK-SQL-STATUS.",
              "type": "PERFORM"
            },
            {
              "line": 550,
              "statement": "IF SQLCODE = 0",
              "type": "IF"
            },
            {
              "line": 558,
              "statement": "IF WS-CONTINUE-CHOICE = \"Y\" OR WS-CONTINUE-CHOICE = \"y\"",
              "type": "IF"
            },
            {
              "line": 564,
              "statement": "PERFORM 8000-CHECK-SQL-STATUS",
              "type": "PERFORM"
            },
            {
              "line": 566,
              "statement": "IF SQLCODE = 0",
              "type": "IF"
            },
            {
              "line": 578,
              "statement": "END-IF",
              "type": "OTHER"
            },
            {
              "line": 581,
              "statement": "END-IF",
              "type": "OTHER"
            },
            {
              "line": 583,
              "statement": "IF SQLCODE = 100",
              "type": "IF"
            },
            {
              "line": 586,
              "statement": "PERFORM 8000-CHECK-SQL-STATUS",
              "type": "PERFORM"
            },
            {
              "line": 587,
              "statement": "END-IF",
              "type": "OTHER"
            },
            {
              "line": 588,
              "statement": "END-IF.",
              "type": "OTHER"
            },
            {
              "line": 594,
              "statement": "MOVE SQLCODE TO WS-SQL-STATUS.",
              "type": "MOVE"
            },
            {
              "line": 595,
              "statement": "MOVE SQLERRMC TO WS-SQL-MSG.",
              "type": "MOVE"
            },
            {
              "line": 597,
              "statement": "IF SQLCODE < 0",
              "type": "IF"
            },
            {
              "line": 604,
              "statement": "END-IF.",
              "type": "OTHER"
            },
            {
              "line": 610,
              "statement": "IF DB-CONNECTED",
              "type": "IF"
            },
            {
              "line": 615,
              "statement": "PERFORM 8000-CHECK-SQL-STATUS",
              "type": "PERFORM"
            },
            {
              "line": 617,
              "statement": "IF SQLCODE = 0",
              "type": "IF"
            },
            {
              "line": 621,
              "statement": "END-IF",
              "type": "OTHER"
            },
            {
              "line": 622,
              "statement": "END-IF.",
              "type": "OTHER"
            }
          ],
          "sql_statements": [
            {
              "line": 25,
              "statement": "EXEC SQL"
            },
            {
              "line": 84,
              "statement": "EXEC SQL BEGIN DECLARE SECTION END-EXEC."
            },
            {
              "line": 98,
              "statement": "EXEC SQL END DECLARE SECTION END-EXEC."
            },
            {
              "line": 103,
              "statement": "EXEC SQL"
            },
            {
              "line": 111,
              "statement": "EXEC SQL"
            },
            {
              "line": 164,
              "statement": "EXEC SQL"
            },
            {
              "line": 238,
              "statement": "EXEC SQL"
            },
            {
              "line": 254,
              "statement": "EXEC SQL"
            },
            {
              "line": 263,
              "statement": "EXEC SQL"
            },
            {
              "line": 313,
              "statement": "EXEC SQL"
            },
            {
              "line": 329,
              "statement": "EXEC SQL"
            },
            {
              "line": 338,
              "statement": "EXEC SQL"
            },
            {
              "line": 405,
              "statement": "EXEC SQL"
            },
            {
              "line": 422,
              "statement": "EXEC SQL"
            },
            {
              "line": 426,
              "statement": "EXEC SQL"
            },
            {
              "line": 444,
              "statement": "EXEC SQL"
            },
            {
              "line": 497,
              "statement": "EXEC SQL"
            },
            {
              "line": 512,
              "statement": "EXEC SQL"
            },
            {
              "line": 516,
              "statement": "EXEC SQL"
            },
            {
              "line": 541,
              "statement": "EXEC SQL"
            },
            {
              "line": 559,
              "statement": "EXEC SQL"
            },
            {
              "line": 571,
              "statement": "EXEC SQL"
            },
            {
              "line": 575,
              "statement": "EXEC SQL"
            },
            {
              "line": 611,
              "statement": "EXEC SQL"
            }
          ]
        }
      },
      "connections": {
        "cobol_code.cbl": {
          "depends_on": [],
          "used_by": [],
          "connection_type": []
        }
      },
      "dependencies": {},
      "field_mappings": {
        "WS-EMPLOYEE-RECORD": {
          "cobol_name": "WS-EMPLOYEE-RECORD",
          "java_name": "wsEmployeeRecord",
          "java_type": "String",
          "pic_clause": null
        },
        "WS-DB-CONNECTION": {
          "cobol_name": "WS-DB-CONNECTION",
          "java_name": "wsDbConnection",
          "java_type": "String",
          "pic_clause": null
        },
        "WS-FLAGS": {
          "cobol_name": "WS-FLAGS",
          "java_name": "wsFlags",
          "java_type": "String",
          "pic_clause": null
        },
        "WS-COUNTERS": {
          "cobol_name": "WS-COUNTERS",
          "java_name": "wsCounters",
          "java_type": "String",
          "pic_clause": null
        },
        "WS-ERROR-HANDLING": {
          "cobol_name": "WS-ERROR-HANDLING",
          "java_name": "wsErrorHandling",
          "java_type": "String",
          "pic_clause": null
        },
        "WS-SEARCH-CRITERIA": {
          "cobol_name": "WS-SEARCH-CRITERIA",
          "java_name": "wsSearchCriteria",
          "java_type": "String",
          "pic_clause": null
        },
        "WS-USER-INPUT": {
          "cobol_name": "WS-USER-INPUT",
          "java_name": "wsUserInput",
          "java_type": "String",
          "pic_clause": null
        },
        "WS-DISPLAY-VARIABLES": {
          "cobol_name": "WS-DISPLAY-VARIABLES",
          "java_name": "wsDisplayVariables",
          "java_type": "String",
          "pic_clause": null
        },
        "HV-EMP-ID": {
          "cobol_name": "HV-EMP-ID",
          "java_name": "hvEmpId",
          "java_type": "Integer",
          "pic_clause": "9("
        },
        "HV-EMP-FIRST-NAME": {
          "cobol_name": "HV-EMP-FIRST-NAME",
          "java_name": "hvEmpFirstName",
          "java_type": "String",
          "pic_clause": "X("
        },
        "HV-EMP-LAST-NAME": {
          "cobol_name": "HV-EMP-LAST-NAME",
          "java_name": "hvEmpLastName",
          "java_type": "String",
          "pic_clause": "X("
        },
        "HV-EMP-DEPT": {
          "cobol_name": "HV-EMP-DEPT",
          "java_name": "hvEmpDept",
          "java_type": "String",
          "pic_clause": "X("
        },
        "HV-EMP-POSITION": {
          "cobol_name": "HV-EMP-POSITION",
          "java_name": "hvEmpPosition",
          "java_type": "String",
          "pic_clause": "X("
        },
        "HV-EMP-SALARY": {
          "cobol_name": "HV-EMP-SALARY",
          "java_name": "hvEmpSalary",
          "java_type": "Integer",
          "pic_clause": "9("
        },
        "HV-EMP-HIRE-DATE": {
          "cobol_name": "HV-EMP-HIRE-DATE",
          "java_name": "hvEmpHireDate",
          "java_type": "String",
          "pic_clause": "X("
        },
        "HV-DB-USER": {
          "cobol_name": "HV-DB-USER",
          "java_name": "hvDbUser",
          "java_type": "String",
          "pic_clause": "X("
        },
        "HV-DB-PASSWORD": {
          "cobol_name": "HV-DB-PASSWORD",
          "java_name": "hvDbPassword",
          "java_type": "String",
          "pic_clause": "X("
        },
        "HV-SEARCH-DEPT": {
          "cobol_name": "HV-SEARCH-DEPT",
          "java_name": "hvSearchDept",
          "java_type": "String",
          "pic_clause": "X("
        },
        "HV-MIN-SALARY": {
          "cobol_name": "HV-MIN-SALARY",
          "java_name": "hvMinSalary",
          "java_type": "Integer",
          "pic_clause": "9("
        }
      },
      "business_entities": [
        {
          "name": "WS-EMPLOYEE-RECORD",
          "source_file": "cobol_code.cbl",
          "line": 32,
          "java_class_name": "WsEmployeeRecord",
          "fields": [],
          "estimated_complexity": "medium"
        },
        {
          "name": "WS-DB-CONNECTION",
          "source_file": "cobol_code.cbl",
          "line": 44,
          "java_class_name": "WsDbConnection",
          "fields": [],
          "estimated_complexity": "medium"
        },
        {
          "name": "WS-FLAGS",
          "source_file": "cobol_code.cbl",
          "line": 50,
          "java_class_name": "WsFlags",
          "fields": [],
          "estimated_complexity": "medium"
        },
        {
          "name": "WS-COUNTERS",
          "source_file": "cobol_code.cbl",
          "line": 56,
          "java_class_name": "WsCounters",
          "fields": [],
          "estimated_complexity": "medium"
        },
        {
          "name": "WS-ERROR-HANDLING",
          "source_file": "cobol_code.cbl",
          "line": 62,
          "java_class_name": "WsErrorHandling",
          "fields": [],
          "estimated_complexity": "medium"
        },
        {
          "name": "WS-SEARCH-CRITERIA",
          "source_file": "cobol_code.cbl",
          "line": 67,
          "java_class_name": "WsSearchCriteria",
          "fields": [],
          "estimated_complexity": "medium"
        },
        {
          "name": "WS-USER-INPUT",
          "source_file": "cobol_code.cbl",
          "line": 71,
          "java_class_name": "WsUserInput",
          "fields": [],
          "estimated_complexity": "medium"
        },
        {
          "name": "WS-DISPLAY-VARIABLES",
          "source_file": "cobol_code.cbl",
          "line": 75,
          "java_class_name": "WsDisplayVariables",
          "fields": [],
          "estimated_complexity": "medium"
        },
        {
          "name": "HV-EMP-ID",
          "source_file": "cobol_code.cbl",
          "line": 86,
          "java_class_name": "HvEmpId",
          "fields": [],
          "estimated_complexity": "medium"
        },
        {
          "name": "HV-EMP-FIRST-NAME",
          "source_file": "cobol_code.cbl",
          "line": 87,
          "java_class_name": "HvEmpFirstName",
          "fields": [],
          "estimated_complexity": "medium"
        },
        {
          "name": "HV-EMP-LAST-NAME",
          "source_file": "cobol_code.cbl",
          "line": 88,
          "java_class_name": "HvEmpLastName",
          "fields": [],
          "estimated_complexity": "medium"
        },
        {
          "name": "HV-EMP-DEPT",
          "source_file": "cobol_code.cbl",
          "line": 89,
          "java_class_name": "HvEmpDept",
          "fields": [],
          "estimated_complexity": "medium"
        },
        {
          "name": "HV-EMP-POSITION",
          "source_file": "cobol_code.cbl",
          "line": 90,
          "java_class_name": "HvEmpPosition",
          "fields": [],
          "estimated_complexity": "medium"
        },
        {
          "name": "HV-EMP-SALARY",
          "source_file": "cobol_code.cbl",
          "line": 91,
          "java_class_name": "HvEmpSalary",
          "fields": [],
          "estimated_complexity": "medium"
        },
        {
          "name": "HV-EMP-HIRE-DATE",
          "source_file": "cobol_code.cbl",
          "line": 92,
          "java_class_name": "HvEmpHireDate",
          "fields": [],
          "estimated_complexity": "medium"
        },
        {
          "name": "HV-DB-USER",
          "source_file": "cobol_code.cbl",
          "line": 93,
          "java_class_name": "HvDbUser",
          "fields": [],
          "estimated_complexity": "medium"
        },
        {
          "name": "HV-DB-PASSWORD",
          "source_file": "cobol_code.cbl",
          "line": 94,
          "java_class_name": "HvDbPassword",
          "fields": [],
          "estimated_complexity": "medium"
        },
        {
          "name": "HV-SEARCH-DEPT",
          "source_file": "cobol_code.cbl",
          "line": 95,
          "java_class_name": "HvSearchDept",
          "fields": [],
          "estimated_complexity": "medium"
        },
        {
          "name": "HV-MIN-SALARY",
          "source_file": "cobol_code.cbl",
          "line": 96,
          "java_class_name": "HvMinSalary",
          "fields": [],
          "estimated_complexity": "medium"
        }
      ],
      "conversion_patterns": [
        {
          "pattern_type": "data_structure",
          "cobol_pattern": "01 WS-EMPLOYEE-RECORD",
          "java_equivalent": "public class WsEmployeeRecord",
          "context": "Convert COBOL record WS-EMPLOYEE-RECORD to Java class",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "data_structure",
          "cobol_pattern": "01 WS-DB-CONNECTION",
          "java_equivalent": "public class WsDbConnection",
          "context": "Convert COBOL record WS-DB-CONNECTION to Java class",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "data_structure",
          "cobol_pattern": "01 WS-FLAGS",
          "java_equivalent": "public class WsFlags",
          "context": "Convert COBOL record WS-FLAGS to Java class",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "data_structure",
          "cobol_pattern": "01 WS-COUNTERS",
          "java_equivalent": "public class WsCounters",
          "context": "Convert COBOL record WS-COUNTERS to Java class",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "data_structure",
          "cobol_pattern": "01 WS-ERROR-HANDLING",
          "java_equivalent": "public class WsErrorHandling",
          "context": "Convert COBOL record WS-ERROR-HANDLING to Java class",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "data_structure",
          "cobol_pattern": "01 WS-SEARCH-CRITERIA",
          "java_equivalent": "public class WsSearchCriteria",
          "context": "Convert COBOL record WS-SEARCH-CRITERIA to Java class",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "data_structure",
          "cobol_pattern": "01 WS-USER-INPUT",
          "java_equivalent": "public class WsUserInput",
          "context": "Convert COBOL record WS-USER-INPUT to Java class",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "data_structure",
          "cobol_pattern": "01 WS-DISPLAY-VARIABLES",
          "java_equivalent": "public class WsDisplayVariables",
          "context": "Convert COBOL record WS-DISPLAY-VARIABLES to Java class",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "data_structure",
          "cobol_pattern": "01 HV-EMP-ID",
          "java_equivalent": "public class HvEmpId",
          "context": "Convert COBOL record HV-EMP-ID to Java class",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "data_structure",
          "cobol_pattern": "01 HV-EMP-FIRST-NAME",
          "java_equivalent": "public class HvEmpFirstName",
          "context": "Convert COBOL record HV-EMP-FIRST-NAME to Java class",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "data_structure",
          "cobol_pattern": "01 HV-EMP-LAST-NAME",
          "java_equivalent": "public class HvEmpLastName",
          "context": "Convert COBOL record HV-EMP-LAST-NAME to Java class",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "data_structure",
          "cobol_pattern": "01 HV-EMP-DEPT",
          "java_equivalent": "public class HvEmpDept",
          "context": "Convert COBOL record HV-EMP-DEPT to Java class",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "data_structure",
          "cobol_pattern": "01 HV-EMP-POSITION",
          "java_equivalent": "public class HvEmpPosition",
          "context": "Convert COBOL record HV-EMP-POSITION to Java class",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "data_structure",
          "cobol_pattern": "01 HV-EMP-SALARY",
          "java_equivalent": "public class HvEmpSalary",
          "context": "Convert COBOL record HV-EMP-SALARY to Java class",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "data_structure",
          "cobol_pattern": "01 HV-EMP-HIRE-DATE",
          "java_equivalent": "public class HvEmpHireDate",
          "context": "Convert COBOL record HV-EMP-HIRE-DATE to Java class",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "data_structure",
          "cobol_pattern": "01 HV-DB-USER",
          "java_equivalent": "public class HvDbUser",
          "context": "Convert COBOL record HV-DB-USER to Java class",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "data_structure",
          "cobol_pattern": "01 HV-DB-PASSWORD",
          "java_equivalent": "public class HvDbPassword",
          "context": "Convert COBOL record HV-DB-PASSWORD to Java class",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "data_structure",
          "cobol_pattern": "01 HV-SEARCH-DEPT",
          "java_equivalent": "public class HvSearchDept",
          "context": "Convert COBOL record HV-SEARCH-DEPT to Java class",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "data_structure",
          "cobol_pattern": "01 HV-MIN-SALARY",
          "java_equivalent": "public class HvMinSalary",
          "context": "Convert COBOL record HV-MIN-SALARY to Java class",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "file_operation",
          "cobol_pattern": "FD EMP",
          "java_equivalent": "// Repository pattern for EMP",
          "context": "Convert file operations to repository pattern",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "file_operation",
          "cobol_pattern": "FD EMP",
          "java_equivalent": "// Repository pattern for EMP",
          "context": "Convert file operations to repository pattern",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "file_operation",
          "cobol_pattern": "FD FIRST",
          "java_equivalent": "// Repository pattern for FIRST",
          "context": "Convert file operations to repository pattern",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "file_operation",
          "cobol_pattern": "FD FIRST",
          "java_equivalent": "// Repository pattern for FIRST",
          "context": "Convert file operations to repository pattern",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "PERFORM 1000-INITIALIZE.",
          "java_equivalent": "// PERFORM converted to Java",
          "context": "Convert PERFORM statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "IF DB-CONNECTED",
          "java_equivalent": "// IF converted to Java",
          "context": "Convert IF statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "PERFORM 2000-PROCESS-USER-CHOICE",
          "java_equivalent": "// PERFORM converted to Java",
          "context": "Convert PERFORM statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "PERFORM 9000-TERMINATE.",
          "java_equivalent": "// PERFORM converted to Java",
          "context": "Convert PERFORM statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "PERFORM 1100-CONNECT-TO-DB.",
          "java_equivalent": "// PERFORM converted to Java",
          "context": "Convert PERFORM statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "PERFORM 8000-CHECK-SQL-STATUS.",
          "java_equivalent": "// PERFORM converted to Java",
          "context": "Convert PERFORM statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "IF SQLCODE = 0",
          "java_equivalent": "// IF converted to Java",
          "context": "Convert IF statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "PERFORM 2100-DISPLAY-MENU.",
          "java_equivalent": "// PERFORM converted to Java",
          "context": "Convert PERFORM statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "PERFORM 3000-RETRIEVE-ALL-EMPLOYEES",
          "java_equivalent": "// PERFORM converted to Java",
          "context": "Convert PERFORM statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "PERFORM 3100-RETRIEVE-BY-CRITERIA",
          "java_equivalent": "// PERFORM converted to Java",
          "context": "Convert PERFORM statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "PERFORM 4000-INSERT-EMPLOYEE",
          "java_equivalent": "// PERFORM converted to Java",
          "context": "Convert PERFORM statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "PERFORM 5000-UPDATE-EMPLOYEE",
          "java_equivalent": "// PERFORM converted to Java",
          "context": "Convert PERFORM statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "PERFORM 6000-DELETE-EMPLOYEE",
          "java_equivalent": "// PERFORM converted to Java",
          "context": "Convert PERFORM statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "IF WS-CONTINUE-CHOICE NOT = \"N\" AND WS-OPERATION-CHOICE NOT = 9",
          "java_equivalent": "// IF converted to Java",
          "context": "Convert IF statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "PERFORM 8000-CHECK-SQL-STATUS.",
          "java_equivalent": "// PERFORM converted to Java",
          "context": "Convert PERFORM statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "IF SQLCODE = 0",
          "java_equivalent": "// IF converted to Java",
          "context": "Convert IF statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "PERFORM 3050-FETCH-EMPLOYEE-RECORD",
          "java_equivalent": "// PERFORM converted to Java",
          "context": "Convert PERFORM statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "IF SQLCODE = 0",
          "java_equivalent": "// IF converted to Java",
          "context": "Convert IF statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "IF SQLCODE = 100",
          "java_equivalent": "// IF converted to Java",
          "context": "Convert IF statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "PERFORM 8000-CHECK-SQL-STATUS",
          "java_equivalent": "// PERFORM converted to Java",
          "context": "Convert PERFORM statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "PERFORM 8000-CHECK-SQL-STATUS.",
          "java_equivalent": "// PERFORM converted to Java",
          "context": "Convert PERFORM statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "IF SQLCODE = 0",
          "java_equivalent": "// IF converted to Java",
          "context": "Convert IF statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "PERFORM 3150-FETCH-DEPT-RECORD",
          "java_equivalent": "// PERFORM converted to Java",
          "context": "Convert PERFORM statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "IF SQLCODE = 0",
          "java_equivalent": "// IF converted to Java",
          "context": "Convert IF statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "IF SQLCODE = 100",
          "java_equivalent": "// IF converted to Java",
          "context": "Convert IF statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "PERFORM 8000-CHECK-SQL-STATUS",
          "java_equivalent": "// PERFORM converted to Java",
          "context": "Convert PERFORM statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "PERFORM 8000-CHECK-SQL-STATUS.",
          "java_equivalent": "// PERFORM converted to Java",
          "context": "Convert PERFORM statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "IF SQLCODE = 0",
          "java_equivalent": "// IF converted to Java",
          "context": "Convert IF statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "PERFORM 8000-CHECK-SQL-STATUS.",
          "java_equivalent": "// PERFORM converted to Java",
          "context": "Convert PERFORM statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "IF SQLCODE = 0",
          "java_equivalent": "// IF converted to Java",
          "context": "Convert IF statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "IF WS-EMP-DEPT = SPACES",
          "java_equivalent": "// IF converted to Java",
          "context": "Convert IF statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "IF WS-EMP-POSITION = SPACES",
          "java_equivalent": "// IF converted to Java",
          "context": "Convert IF statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "IF WS-EMP-SALARY = ZEROES",
          "java_equivalent": "// IF converted to Java",
          "context": "Convert IF statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "PERFORM 8000-CHECK-SQL-STATUS",
          "java_equivalent": "// PERFORM converted to Java",
          "context": "Convert PERFORM statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "IF SQLCODE = 0",
          "java_equivalent": "// IF converted to Java",
          "context": "Convert IF statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "IF SQLCODE = 100",
          "java_equivalent": "// IF converted to Java",
          "context": "Convert IF statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "PERFORM 8000-CHECK-SQL-STATUS",
          "java_equivalent": "// PERFORM converted to Java",
          "context": "Convert PERFORM statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "PERFORM 8000-CHECK-SQL-STATUS.",
          "java_equivalent": "// PERFORM converted to Java",
          "context": "Convert PERFORM statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "IF SQLCODE = 0",
          "java_equivalent": "// IF converted to Java",
          "context": "Convert IF statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "IF WS-CONTINUE-CHOICE = \"Y\" OR WS-CONTINUE-CHOICE = \"y\"",
          "java_equivalent": "// IF converted to Java",
          "context": "Convert IF statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "PERFORM 8000-CHECK-SQL-STATUS",
          "java_equivalent": "// PERFORM converted to Java",
          "context": "Convert PERFORM statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "IF SQLCODE = 0",
          "java_equivalent": "// IF converted to Java",
          "context": "Convert IF statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "IF SQLCODE = 100",
          "java_equivalent": "// IF converted to Java",
          "context": "Convert IF statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "PERFORM 8000-CHECK-SQL-STATUS",
          "java_equivalent": "// PERFORM converted to Java",
          "context": "Convert PERFORM statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "IF SQLCODE < 0",
          "java_equivalent": "// IF converted to Java",
          "context": "Convert IF statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "IF DB-CONNECTED",
          "java_equivalent": "// IF converted to Java",
          "context": "Convert IF statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "PERFORM 8000-CHECK-SQL-STATUS",
          "java_equivalent": "// PERFORM converted to Java",
          "context": "Convert PERFORM statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "IF SQLCODE = 0",
          "java_equivalent": "// IF converted to Java",
          "context": "Convert IF statement to Java",
          "source_file": "cobol_code.cbl"
        }
      ]
    },
    "cics_results": {
      "programs": {
        "BANKING.CBL": {
          "description": "COBOL CICS program",
          "program_id": "BANKING",
          "copybooks": [
            "ACCOUNT-VALIDATION.cpy",
            "ERROR-CODES.cpy",
            "SECURITY-CONTROL.cpy",
            "TRANSACTION-TYPES.cpy"
          ],
          "control_includes": [],
          "file_descriptors": [
            {
              "name": "ACCOUNT-FILE",
              "line": 69,
              "type": "Sequential"
            },
            {
              "name": "TRANS-FILE",
              "line": 93,
              "type": "Sequential"
            },
            {
              "name": "AUDIT-FILE",
              "line": 121,
              "type": "Sequential"
            }
          ],
          "cics_commands": [
            {
              "line": 343,
              "verb": "RETURN",
              "command_type": "RETURN",
              "parameters": {
                "TRANSID": "BANK",
                "COMMAREA": "DFHCOMMAREA",
                "USERID": "WS-USER-ID",
                "TERMID": "WS-TERMINAL-ID"
              },
              "raw_block": "EXEC CICS RETURN  TRANSID('BANK')  COMMAREA(DFHCOMMAREA)  END-EXEC.    INITIALIZE-TRANSACTION.  *> Get terminal and user information  EXEC CICS ASSIGN  USERID(WS-USER-ID)  TERMID(WS-TERMINAL-ID)  END-EXEC",
              "dotnet_service": "ITransactionService",
              "dotnet_method": "CompleteTransactionAsync",
              "conversion_hint": "Transaction completion",
              "ai_conversion": "public class CicsTransaction\n{\n    private string DFHCOMMAREA;\n    private string WS_USER_ID;\n    private string WS_TERMINAL_ID;\n\n    public void ExecuteTransaction()\n    {\n        InitializeTransaction();\n        AssignUserAndTerminal();\n        ReturnTransaction(\"BANK\", DFHCOMMAREA);\n    }\n\n    private void InitializeTransaction()\n    {\n        // Logic to initialize transaction\n    }\n\n    private void AssignUserAndTerminal()\n    {\n        WS_USER_ID = GetUserId();\n        WS_TERMINAL_ID = GetTerminalId();\n    }\n\n    private void ReturnTransaction(string transId, string commArea)\n    {\n        // Logic to return transaction with transId and commArea\n    }\n\n    private string GetUserId()\n    {\n        // Logic to get user ID\n        return \"User123\";\n    }\n\n    private string GetTerminalId()\n    {\n        // Logic to get terminal ID\n        return \"Terminal456\";\n    }\n}",
              "complexity_score": 4,
              "performance_impact": "low",
              "security_considerations": [
                "Validate and sanitize COMMAREA payload"
              ]
            },
            {
              "line": 381,
              "verb": "LINK",
              "command_type": "LINK",
              "parameters": {
                "PROGRAM": "AUTHCHK",
                "COMMAREA": "LK-USER-ID",
                "LENGTH": "8"
              },
              "raw_block": "EXEC CICS LINK  PROGRAM('AUTHCHK')  COMMAREA(LK-USER-ID)  LENGTH(8)  END-EXEC",
              "dotnet_service": "IMediator",
              "dotnet_method": "SendAsync",
              "conversion_hint": "MediatR command/query pattern",
              "ai_conversion": "using System;\nusing System.Runtime.InteropServices;\n\npublic class CicsLinkExample\n{\n    [DllImport(\"cics.dll\", EntryPoint = \"CicsLink\")]\n    private static extern int CicsLink(string program, ref byte[] commarea, int length);\n\n    public void ExecuteLink()\n    {\n        string programName = \"AUTHCHK\";\n        byte[] commarea = new byte[8];\n        // Assuming LK-USER-ID is populated into commarea\n        int length = 8;\n\n        int result = CicsLink(programName, ref commarea, length);\n\n        if (result != 0)\n        {\n            throw new Exception(\"CICS LINK command failed with error code: \" + result);\n        }\n\n        // Process the commarea as needed\n    }\n}",
              "complexity_score": 3,
              "performance_impact": "high",
              "security_considerations": [
                "Validate and sanitize COMMAREA payload",
                "Ensure linked program is authorized"
              ]
            },
            {
              "line": 417,
              "verb": "LINK",
              "command_type": "LINK",
              "parameters": {
                "PROGRAM": "SESSVAL",
                "CHANNEL": "WS-CHANNEL-NAME",
                "CONTAINER": "WS-CONTAINER-NAME",
                "FILE": "ACCOUNTS",
                "INTO": "ACCOUNT-RECORD",
                "RIDFLD": "ACC-KEY",
                "RESP": "WS-CICS-RESP"
              },
              "raw_block": "EXEC CICS LINK  PROGRAM('SESSVAL')  CHANNEL(WS-CHANNEL-NAME)  CONTAINER(WS-CONTAINER-NAME)  END-EXEC.    ACCOUNT-INQUIRY.  *> Read account information  MOVE LK-FROM-ACCOUNT TO ACC-NUMBER    EXEC CICS READ  FILE('ACCOUNTS')  INTO(ACCOUNT-RECORD)  RIDFLD(ACC-KEY)  RESP(WS-CICS-RESP)  END-EXEC",
              "dotnet_service": "IMediator",
              "dotnet_method": "SendAsync",
              "conversion_hint": "MediatR command/query pattern",
              "ai_conversion": "using System;\n\npublic class CICSLinkExample\n{\n    public void ExecuteLink()\n    {\n        string programName = \"SESSVAL\";\n        string channelName = \"WS-CHANNEL-NAME\";\n        string containerName = \"WS-CONTAINER-NAME\";\n        string fileName = \"ACCOUNTS\";\n        string accountRecord = string.Empty;\n        string accKey = \"ACC-KEY\";\n        int cicsResponse = 0;\n\n        // Simulate CICS LINK command\n        LinkToProgram(programName, channelName, containerName);\n\n        // Simulate account inquiry\n        string accNumber = \"LK-FROM-ACCOUNT\";\n        ReadAccountInformation(fileName, accNumber, ref accountRecord, accKey, ref cicsResponse);\n    }\n\n    private void LinkToProgram(string program, string channel, string container)\n    {\n        // Logic to link to the program\n        Console.WriteLine($\"Linking to program {program} with channel {channel} and container {container}\");\n    }\n\n    private void ReadAccountInformation(string file, string accNumber, ref string accountRecord, string ridFld, ref int resp)\n    {\n        // Logic to read account information\n        Console.WriteLine($\"Reading from file {file} with account number {accNumber} and RIDFLD {ridFld}\");\n        accountRecord = \"Sample Account Record\"; // Simulated account record\n        resp = 0; // Simulated response code\n    }\n}",
              "complexity_score": 8,
              "performance_impact": "high",
              "security_considerations": [
                "Ensure container data is authenticated",
                "Ensure linked program is authorized"
              ]
            },
            {
              "line": 465,
              "verb": "SYNCPOINT",
              "command_type": "",
              "parameters": {
                "DFHRESP": "NORMAL"
              },
              "raw_block": "EXEC CICS SYNCPOINT ROLLBACK END-EXEC    PERFORM DEBIT-FROM-ACCOUNT  IF WS-CICS-RESP = DFHRESP(NORMAL)  PERFORM CREDIT-TO-ACCOUNT  IF WS-CICS-RESP = DFHRESP(NORMAL)  PERFORM LOG-TRANSACTION  EXEC CICS SYNCPOINT END-EXEC",
              "dotnet_service": "",
              "dotnet_method": "",
              "conversion_hint": "",
              "ai_conversion": "try\n{\n    // Perform debit from account\n    DebitFromAccount();\n    \n    if (WsCicsResp == Dfhresp.Normal)\n    {\n        // Perform credit to account\n        CreditToAccount();\n        \n        if (WsCicsResp == Dfhresp.Normal)\n        {\n            // Log transaction\n            LogTransaction();\n            \n            // Commit transaction\n            Transaction.Commit();\n        }\n    }\n}\ncatch (Exception)\n{\n    // Rollback transaction in case of error\n    Transaction.Rollback();\n}",
              "complexity_score": 2,
              "performance_impact": "low",
              "security_considerations": []
            },
            {
              "line": 471,
              "verb": "SYNCPOINT",
              "command_type": "",
              "parameters": {},
              "raw_block": "EXEC CICS SYNCPOINT END-EXEC  PERFORM NOTIFY-TRANSFER-COMPLETE  ELSE  EXEC CICS SYNCPOINT ROLLBACK END-EXEC",
              "dotnet_service": "",
              "dotnet_method": "",
              "conversion_hint": "",
              "ai_conversion": "try\n{\n    // Commit transaction\n    transaction.Commit();\n    NotifyTransferComplete();\n}\ncatch (Exception)\n{\n    // Rollback transaction\n    transaction.Rollback();\n}",
              "complexity_score": 0,
              "performance_impact": "low",
              "security_considerations": []
            },
            {
              "line": 479,
              "verb": "SYNCPOINT",
              "command_type": "",
              "parameters": {},
              "raw_block": "EXEC CICS SYNCPOINT ROLLBACK END-EXEC  PERFORM HANDLE-CREDIT-ERROR  END-IF  ELSE  EXEC CICS SYNCPOINT ROLLBACK END-EXEC",
              "dotnet_service": "",
              "dotnet_method": "",
              "conversion_hint": "",
              "ai_conversion": "try\n{\n    // Perform syncpoint rollback logic\n    HandleCreditError();\n}\ncatch (Exception)\n{\n    // Perform syncpoint rollback logic\n}",
              "complexity_score": 0,
              "performance_impact": "low",
              "security_considerations": []
            },
            {
              "line": 505,
              "verb": "SYNCPOINT",
              "command_type": "READ",
              "parameters": {
                "FILE": "ACCOUNTS",
                "INTO": "ACCOUNT-RECORD",
                "RIDFLD": "ACC-KEY",
                "RESP": "WS-CICS-RESP"
              },
              "raw_block": "EXEC CICS SYNCPOINT ROLLBACK END-EXEC  PERFORM HANDLE-DEBIT-ERROR  END-IF  END-IF.    DEBIT-FROM-ACCOUNT.  MOVE LK-FROM-ACCOUNT TO ACC-NUMBER    EXEC CICS READ UPDATE  FILE('ACCOUNTS')  INTO(ACCOUNT-RECORD)  RIDFLD(ACC-KEY)  RESP(WS-CICS-RESP)  END-EXEC",
              "dotnet_service": "IRepositoryService",
              "dotnet_method": "ReadAsync",
              "conversion_hint": "Entity Framework repository pattern",
              "ai_conversion": "using System;\nusing System.Transactions;\n\npublic class AccountService\n{\n    private const string AccountsFile = \"ACCOUNTS\";\n    private const string AccountRecord = \"ACCOUNT-RECORD\";\n    private const string AccKey = \"ACC-KEY\";\n    private const string WsCicsResp = \"WS-CICS-RESP\";\n\n    public void DebitFromAccount(string lkFromAccount)\n    {\n        string accNumber = lkFromAccount;\n\n        try\n        {\n            using (var transactionScope = new TransactionScope())\n            {\n                // Read the account record\n                var accountRecord = ReadAccountRecord(accNumber);\n\n                // Perform debit operation\n                HandleDebit(accountRecord);\n\n                // Complete the transaction\n                transactionScope.Complete();\n            }\n        }\n        catch (Exception ex)\n        {\n            HandleDebitError(ex);\n        }\n    }\n\n    private object ReadAccountRecord(string accNumber)\n    {\n        // Simulate reading from a file or database\n        // Replace with actual file/database read logic\n        return new { AccountNumber = accNumber };\n    }\n\n    private void HandleDebit(object accountRecord)\n    {\n        // Simulate debit operation\n        // Replace with actual debit logic\n    }\n\n    private void HandleDebitError(Exception ex)\n    {\n        // Handle error\n        Console.WriteLine($\"Error handling debit: {ex.Message}\");\n    }\n}",
              "complexity_score": 5,
              "performance_impact": "medium",
              "security_considerations": []
            },
            {
              "line": 527,
              "verb": "REWRITE",
              "command_type": "WRITE",
              "parameters": {
                "FILE": "ACCOUNTS",
                "FROM": "ACCOUNT-RECORD",
                "RESP": "WS-CICS-RESP"
              },
              "raw_block": "EXEC CICS REWRITE  FILE('ACCOUNTS')  FROM(ACCOUNT-RECORD)  RESP(WS-CICS-RESP)  END-EXEC",
              "dotnet_service": "IRepositoryService",
              "dotnet_method": "CreateAsync",
              "conversion_hint": "Entity Framework Add operation",
              "ai_conversion": "try\n{\n    // Assuming ACCOUNT-RECORD is a byte array or similar structure\n    var accountRecord = GetAccountRecord(); // Method to retrieve the account record data\n\n    // Assuming a method to rewrite the record in the file\n    RewriteRecordInFile(\"ACCOUNTS\", accountRecord);\n}\ncatch (Exception ex)\n{\n    // Handle exception and set response code\n    int wsCicsResp = GetResponseCodeFromException(ex);\n    // Log or handle the response code as needed\n}",
              "complexity_score": 3,
              "performance_impact": "medium",
              "security_considerations": []
            },
            {
              "line": 557,
              "verb": "READ",
              "command_type": "READ",
              "parameters": {
                "FILE": "ACCOUNTS",
                "INTO": "ACCOUNT-RECORD",
                "RIDFLD": "ACC-KEY",
                "RESP": "WS-CICS-RESP"
              },
              "raw_block": "EXEC CICS READ UPDATE  FILE('ACCOUNTS')  INTO(ACCOUNT-RECORD)  RIDFLD(ACC-KEY)  RESP(WS-CICS-RESP)  END-EXEC",
              "dotnet_service": "IRepositoryService",
              "dotnet_method": "ReadAsync",
              "conversion_hint": "Entity Framework repository pattern",
              "ai_conversion": "try\n{\n    var accountRecord = new AccountRecord();\n    var accKey = GetAccKey(); // Method to retrieve the ACC-KEY value\n    var response = ReadFromAccountsFile(accKey, ref accountRecord);\n\n    if (response != ResponseCode.Success)\n    {\n        // Handle response code\n    }\n}\ncatch (Exception ex)\n{\n    // Handle exception\n}\n\n// Method to simulate reading from the 'ACCOUNTS' file\nResponseCode ReadFromAccountsFile(string accKey, ref AccountRecord accountRecord)\n{\n    // Implement file reading logic here\n    // Update accountRecord with the data read\n    // Return appropriate response code\n    return ResponseCode.Success;\n}\n\n// Placeholder for account record structure\npublic class AccountRecord\n{\n    // Define properties for account record fields\n}\n\n// Placeholder for response codes\npublic enum ResponseCode\n{\n    Success,\n    // Define other response codes\n}",
              "complexity_score": 4,
              "performance_impact": "medium",
              "security_considerations": []
            },
            {
              "line": 575,
              "verb": "REWRITE",
              "command_type": "WRITE",
              "parameters": {
                "FILE": "ACCOUNTS",
                "FROM": "ACCOUNT-RECORD",
                "RESP": "WS-CICS-RESP"
              },
              "raw_block": "EXEC CICS REWRITE  FILE('ACCOUNTS')  FROM(ACCOUNT-RECORD)  RESP(WS-CICS-RESP)  END-EXEC",
              "dotnet_service": "IRepositoryService",
              "dotnet_method": "CreateAsync",
              "conversion_hint": "Entity Framework Add operation",
              "ai_conversion": "try\n{\n    // Assuming ACCOUNT-RECORD is a byte array or a similar data structure\n    byte[] accountRecord = GetAccountRecord(); // Method to get the account record data\n\n    // Assuming a method to rewrite the record in the file\n    RewriteRecordInFile(\"ACCOUNTS\", accountRecord);\n}\ncatch (Exception ex)\n{\n    int wsCicsResp = HandleCicsException(ex); // Method to handle exceptions and set response code\n}",
              "complexity_score": 3,
              "performance_impact": "medium",
              "security_considerations": []
            },
            {
              "line": 621,
              "verb": "ASKTIME",
              "command_type": "WRITE",
              "parameters": {
                "ABSTIME": "TRANS-DATE",
                "DATE": "9:6",
                "FILE": "TRANSACTIONS",
                "FROM": "TRANSACTION-RECORD",
                "RIDFLD": "TRANS-KEY",
                "RESP": "WS-CICS-RESP"
              },
              "raw_block": "EXEC CICS ASKTIME ABSTIME(TRANS-DATE) END-EXEC  MOVE FUNCTION CURRENT-DATE(1:8) TO TRANS-DATE  MOVE FUNCTION CURRENT-DATE(9:6) TO TRANS-TIME  ADD 1 TO WS-RECORD-COUNT  MOVE WS-RECORD-COUNT TO TRANS-SEQ  MOVE LK-FROM-ACCOUNT TO TRANS-FROM-ACC  MOVE LK-TO-ACCOUNT TO TRANS-TO-ACC  MOVE LK-AMOUNT TO TRANS-AMOUNT  MOVE 'TRF' TO TRANS-TYPE  MOVE 'C' TO TRANS-STATUS  MOVE WS-USER-ID TO TRANS-USER-ID  MOVE WS-TERMINAL-ID TO TRANS-TERMINAL    EXEC CICS WRITE  FILE('TRANSACTIONS')  FROM(TRANSACTION-RECORD)  RIDFLD(TRANS-KEY)  RESP(WS-CICS-RESP)  END-EXEC",
              "dotnet_service": "IRepositoryService",
              "dotnet_method": "CreateAsync",
              "conversion_hint": "Entity Framework Add operation",
              "ai_conversion": "using System;\n\npublic class TransactionProcessor\n{\n    private DateTime currentDate;\n    private int recordCount;\n    private string fromAccount;\n    private string toAccount;\n    private decimal amount;\n    private string userId;\n    private string terminalId;\n    private string transactionKey;\n    private string transactionRecord;\n    private string cicsResponse;\n\n    public void ProcessTransaction()\n    {\n        // Get current date and time\n        currentDate = DateTime.Now;\n        string transDate = currentDate.ToString(\"yyyyMMdd\");\n        string transTime = currentDate.ToString(\"HHmmss\");\n\n        // Increment record count\n        recordCount++;\n\n        // Prepare transaction record\n        string transSeq = recordCount.ToString();\n        string transFromAcc = fromAccount;\n        string transToAcc = toAccount;\n        string transAmount = amount.ToString();\n        string transType = \"TRF\";\n        string transStatus = \"C\";\n        string transUserId = userId;\n        string transTerminal = terminalId;\n\n        // Write transaction record to file\n        WriteTransactionRecord(transDate, transTime, transSeq, transFromAcc, transToAcc, transAmount, transType, transStatus, transUserId, transTerminal);\n    }\n\n    private void WriteTransactionRecord(string transDate, string transTime, string transSeq, string transFromAcc, string transToAcc, string transAmount, string transType, string transStatus, string transUserId, string transTerminal)\n    {\n        // Simulate writing to a file or database\n        transactionRecord = $\"{transDate},{transTime},{transSeq},{transFromAcc},{transToAcc},{transAmount},{transType},{transStatus},{transUserId},{transTerminal}\";\n        transactionKey = transSeq; // Assuming transaction key is sequence number\n        cicsResponse = \"Success\"; // Simulate CICS response\n\n        // Output the transaction record for demonstration purposes\n        Console.WriteLine($\"Transaction Record: {transactionRecord}\");\n        Console.WriteLine($\"CICS Response: {cicsResponse}\");\n    }\n}",
              "complexity_score": 8,
              "performance_impact": "medium",
              "security_considerations": []
            },
            {
              "line": 643,
              "verb": "STARTBR",
              "command_type": "",
              "parameters": {
                "FILE": "TRANSACTIONS",
                "RIDFLD": "LK-FROM-ACCOUNT",
                "RESP": "WS-CICS-RESP"
              },
              "raw_block": "EXEC CICS STARTBR  FILE('TRANSACTIONS')  RIDFLD(LK-FROM-ACCOUNT)  RESP(WS-CICS-RESP)  END-EXEC",
              "dotnet_service": "",
              "dotnet_method": "",
              "conversion_hint": "",
              "ai_conversion": "try\n{\n    // Assuming a method StartBrowse exists to handle the STARTBR operation\n    StartBrowse(\"TRANSACTIONS\", LK_FROM_ACCOUNT);\n}\ncatch (Exception ex)\n{\n    WS_CICS_RESP = ex.Message;\n}",
              "complexity_score": 3,
              "performance_impact": "low",
              "security_considerations": []
            },
            {
              "line": 677,
              "verb": "ENDBR",
              "command_type": "",
              "parameters": {
                "FILE": "TRANSACTIONS",
                "INTO": "TRANSACTION-RECORD",
                "RIDFLD": "TRANS-KEY",
                "RESP": "WS-CICS-RESP"
              },
              "raw_block": "EXEC CICS ENDBR FILE('TRANSACTIONS') END-EXEC  END-IF.    READ-TRANSACTION-HISTORY.  MOVE 'N' TO WS-EOF-FLAG  MOVE 1 TO WS-TSQ-ITEM    PERFORM UNTIL WS-EOF-FLAG = 'Y'  EXEC CICS READNEXT  FILE('TRANSACTIONS')  INTO(TRANSACTION-RECORD)  RIDFLD(TRANS-KEY)  RESP(WS-CICS-RESP)  END-EXEC",
              "dotnet_service": "",
              "dotnet_method": "",
              "conversion_hint": "",
              "ai_conversion": "string transactionRecord;\nstring transKey;\nstring wsCicsResp;\nbool wsEofFlag = false;\nint wsTsqItem = 1;\n\nwhile (!wsEofFlag)\n{\n    // Simulate reading the next transaction record\n    transactionRecord = ReadNextTransaction(transKey, out wsCicsResp);\n\n    // Check response code and set EOF flag if necessary\n    if (wsCicsResp == \"EOF\")\n    {\n        wsEofFlag = true;\n    }\n    else\n    {\n        // Process the transaction record\n        ProcessTransactionRecord(transactionRecord);\n\n        // Increment the TSQ item counter\n        wsTsqItem++;\n    }\n}\n\n// Method to simulate reading the next transaction record\nstring ReadNextTransaction(string key, out string response)\n{\n    // Simulate reading logic\n    response = \"OK\"; // or \"EOF\" if end of file\n    return \"SampleTransactionRecord\";\n}\n\n// Method to process the transaction record\nvoid ProcessTransactionRecord(string record)\n{\n    // Processing logic\n}",
              "complexity_score": 5,
              "performance_impact": "low",
              "security_considerations": []
            },
            {
              "line": 715,
              "verb": "GET",
              "command_type": "",
              "parameters": {
                "CONTAINER": "WS-CONTAINER-NAME",
                "CHANNEL": "WS-CHANNEL-NAME",
                "INTO": "WS-CONTAINER-DATA",
                "FLENGTH": "WS-CONTAINER-LENGTH"
              },
              "raw_block": "EXEC CICS GET CONTAINER(WS-CONTAINER-NAME)  CHANNEL(WS-CHANNEL-NAME)  INTO(WS-CONTAINER-DATA)  FLENGTH(WS-CONTAINER-LENGTH)  END-EXEC",
              "dotnet_service": "",
              "dotnet_method": "",
              "conversion_hint": "",
              "ai_conversion": "using System;\nusing System.Text;\n\npublic class CicsContainerHandler\n{\n    public byte[] GetContainerData(string containerName, string channelName, out int containerLength)\n    {\n        // Simulate fetching data from a CICS container\n        // In a real-world scenario, this would involve calling a CICS API or service\n        byte[] containerData = FetchDataFromCics(containerName, channelName);\n        containerLength = containerData.Length;\n        return containerData;\n    }\n\n    private byte[] FetchDataFromCics(string containerName, string channelName)\n    {\n        // Placeholder for actual CICS data fetching logic\n        // For demonstration, returning a dummy byte array\n        return Encoding.UTF8.GetBytes(\"Sample Data\");\n    }\n}\n\npublic class Program\n{\n    public static void Main()\n    {\n        var handler = new CicsContainerHandler();\n        int containerLength;\n        byte[] containerData = handler.GetContainerData(\"WS-CONTAINER-NAME\", \"WS-CHANNEL-NAME\", out containerLength);\n\n        Console.WriteLine($\"Container Length: {containerLength}\");\n        Console.WriteLine($\"Container Data: {Encoding.UTF8.GetString(containerData)}\");\n    }\n}",
              "complexity_score": 4,
              "performance_impact": "low",
              "security_considerations": [
                "Ensure container data is authenticated"
              ]
            },
            {
              "line": 747,
              "verb": "LINK",
              "command_type": "LINK",
              "parameters": {
                "PROGRAM": "BATCHPRC",
                "CHANNEL": "WS-CHANNEL-NAME"
              },
              "raw_block": "EXEC CICS LINK  PROGRAM('BATCHPRC')  CHANNEL(WS-CHANNEL-NAME)  END-EXEC.    *> SQL Operations for reporting  GENERATE-ACCOUNT-REPORT.  EXEC SQL  DECLARE ACCOUNT-CURSOR CURSOR FOR  SELECT ACC_NUMBER, ACC_HOLDER_NAME, ACC_BALANCE, ACC_TYPE  FROM ACCOUNTS  WHERE ACC_STATUS = 'A'  ORDER BY ACC_BALANCE DESC  END-EXEC",
              "dotnet_service": "IMediator",
              "dotnet_method": "SendAsync",
              "conversion_hint": "MediatR command/query pattern",
              "ai_conversion": "using System;\nusing System.Data.SqlClient;\n\npublic class ProgramLink\n{\n    public void ExecuteLink()\n    {\n        // Simulate the LINK to the program \"BATCHPRC\" with channel \"WS-CHANNEL-NAME\"\n        BatchProcess(\"WS-CHANNEL-NAME\");\n\n        // SQL Operations for reporting\n        GenerateAccountReport();\n    }\n\n    private void BatchProcess(string channelName)\n    {\n        // Logic for batch processing with the given channel name\n        Console.WriteLine($\"Executing batch process with channel: {channelName}\");\n    }\n\n    private void GenerateAccountReport()\n    {\n        string connectionString = \"your_connection_string_here\";\n        string query = @\"\n            SELECT ACC_NUMBER, ACC_HOLDER_NAME, ACC_BALANCE, ACC_TYPE \n            FROM ACCOUNTS \n            WHERE ACC_STATUS = 'A' \n            ORDER BY ACC_BALANCE DESC\";\n\n        using (SqlConnection connection = new SqlConnection(connectionString))\n        {\n            SqlCommand command = new SqlCommand(query, connection);\n            connection.Open();\n\n            using (SqlDataReader reader = command.ExecuteReader())\n            {\n                while (reader.Read())\n                {\n                    Console.WriteLine($\"Account Number: {reader[\"ACC_NUMBER\"]}, Holder Name: {reader[\"ACC_HOLDER_NAME\"]}, Balance: {reader[\"ACC_BALANCE\"]}, Type: {reader[\"ACC_TYPE\"]}\");\n                }\n            }\n        }\n    }\n}",
              "complexity_score": 3,
              "performance_impact": "high",
              "security_considerations": [
                "Ensure container data is authenticated",
                "Ensure linked program is authorized"
              ]
            },
            {
              "line": 899,
              "verb": "WRITEQ",
              "command_type": "WRITEQ_TS",
              "parameters": {
                "QUEUE": "AUDIT",
                "FROM": "TRANSACTION-START",
                "LENGTH": "17",
                "ITEM": "WS-TSQ-ITEM",
                "RESP": "WS-CICS-RESP",
                "MAPSET": "WS-MAPSET",
                "MAP": "WS-MAP-NAME",
                "CURSOR": "WS-CURSOR-POS"
              },
              "raw_block": "EXEC CICS WRITEQ TS  QUEUE(WS-TSQ-NAME)  FROM('SESSION-START')  LENGTH(13)  ITEM(WS-TSQ-ITEM)  RESP(WS-CICS-RESP)  END-EXEC.    STORE-ACCOUNT-IN-TSQ.  ADD 1 TO WS-TSQ-ITEM  MOVE LENGTH OF ACCOUNT-RECORD TO WS-TSQ-LENGTH    EXEC CICS WRITEQ TS  QUEUE(WS-TSQ-NAME)  FROM(ACCOUNT-RECORD)  LENGTH(WS-TSQ-LENGTH)  ITEM(WS-TSQ-ITEM)  END-EXEC.    SEND-MQ-NOTIFICATION.  MOVE 'TRANSFER-COMPLETE' TO WS-MQ-MESSAGE  MOVE 100 TO WS-MQ-LENGTH    EXEC CICS WRITEQ TD  QUEUE(WS-MQ-QUEUE)  FROM(WS-MQ-MESSAGE)  LENGTH(WS-MQ-LENGTH)  END-EXEC.    SEND-ACCOUNT-MAP.  EXEC CICS SEND  MAPSET(WS-MAPSET)  MAP(WS-MAP-NAME)  FROM(ACCOUNT-RECORD)  ERASE  CURSOR(WS-CURSOR-POS)  END-EXEC.    HANDLE-FILE-ERROR.  ADD 1 TO WS-ERROR-COUNT  MOVE 'FILE-ERROR' TO WS-ERROR-CODE  PERFORM LOG-ERROR.    START-AUDIT-LOG.  EXEC CICS WRITEQ TD  QUEUE('AUDIT')  FROM('TRANSACTION-START')  LENGTH(17)  END-EXEC.    FINALIZE-TRANSACTION.  EXEC CICS DELETEQ TS  QUEUE(WS-TSQ-NAME)  END-EXEC",
              "dotnet_service": "ICacheService",
              "dotnet_method": "WriteToTempStorageAsync",
              "conversion_hint": "Redis/MemoryCache implementation",
              "ai_conversion": "using System;\nusing System.Text;\n\npublic class CicsOperations\n{\n    private int wsTsqItem = 0;\n    private int wsTsqLength = 0;\n    private int wsErrorCount = 0;\n    private string wsCicsResp;\n    private string wsTsqName = \"WS-TSQ-NAME\";\n    private string wsMqQueue = \"WS-MQ-QUEUE\";\n    private string wsMapSet = \"WS-MAPSET\";\n    private string wsMapName = \"WS-MAP-NAME\";\n    private int wsCursorPos = 0;\n    private string wsErrorCode;\n    private string accountRecord = \"ACCOUNT-RECORD\";\n    private string wsMqMessage;\n    private int wsMqLength;\n\n    public void Execute()\n    {\n        StoreAccountInTsq();\n        SendMqNotification();\n        SendAccountMap();\n        HandleFileError();\n        StartAuditLog();\n        FinalizeTransaction();\n    }\n\n    private void StoreAccountInTsq()\n    {\n        WriteQueueTs(wsTsqName, \"SESSION-START\", 13, wsTsqItem, out wsCicsResp);\n        wsTsqItem++;\n        wsTsqLength = accountRecord.Length;\n        WriteQueueTs(wsTsqName, accountRecord, wsTsqLength, wsTsqItem, out wsCicsResp);\n    }\n\n    private void SendMqNotification()\n    {\n        wsMqMessage = \"TRANSFER-COMPLETE\";\n        wsMqLength = 100;\n        WriteQueueTd(wsMqQueue, wsMqMessage, wsMqLength);\n    }\n\n    private void SendAccountMap()\n    {\n        SendMap(wsMapSet, wsMapName, accountRecord, wsCursorPos);\n    }\n\n    private void HandleFileError()\n    {\n        wsErrorCount++;\n        wsErrorCode = \"FILE-ERROR\";\n        LogError();\n    }\n\n    private void StartAuditLog()\n    {\n        WriteQueueTd(\"AUDIT\", \"TRANSACTION-START\", 17);\n    }\n\n    private void FinalizeTransaction()\n    {\n        DeleteQueueTs(wsTsqName);\n    }\n\n    private void WriteQueueTs(string queue, string from, int length, int item, out string resp)\n    {\n        // Simulate CICS WRITEQ TS operation\n        resp = \"OK\";\n        Console.WriteLine($\"WRITEQ TS: Queue={queue}, From={from}, Length={length}, Item",
              "complexity_score": 12,
              "performance_impact": "medium",
              "security_considerations": []
            }
          ],
          "sql_blocks": [
            {
              "original_sql": "EXEC SQL OPEN ACCOUNT-CURSOR END-EXEC\n\n\n\nPERFORM PROCESS-REPORT-RECORDS UNTIL WS-EOF-FLAG = 'Y'\n\n\n\nEXEC SQL CLOSE ACCOUNT-CURSOR END-EXEC.",
              "line_number": 759,
              "sql_type": "SELECT",
              "dotnet_equivalent": "// TODO: Convert SQL: EXEC SQL OPEN ACCOUNT-CURSOR END-EXEC\n\n\n\nPERFORM PROCESS-REPORT-RECORDS UNTIL WS-EOF-FLAG = 'Y'\n\n\n\nEXEC SQL CLOSE ACCOUNT-CURSOR END-EXEC.",
              "entity_framework_hint": "Repository pattern",
              "complexity": "HIGH"
            },
            {
              "original_sql": "EXEC SQL CLOSE ACCOUNT-CURSOR END-EXEC.\n\n\n\nPROCESS-REPORT-RECORDS.\n\nEXEC SQL\n\nFETCH ACCOUNT-CURSOR\n\nINTO :ACC-NUMBER, :ACC-HOLDER-NAME, :ACC-BALANCE, :ACC-TYPE\n\nEND-EXEC",
              "line_number": 771,
              "sql_type": "SELECT",
              "dotnet_equivalent": "// TODO: Convert SQL: EXEC SQL CLOSE ACCOUNT-CURSOR END-EXEC.\n\n\n\nPROCESS-REPORT-RECORDS.\n\nEXEC SQL\n\nFETCH ACCOUNT-CURSOR\n\nINTO :ACC-NUMBER, :ACC-HOLDER-NAME, :ACC-BALANCE, :ACC-TYPE\n\nEND-EXEC",
              "entity_framework_hint": "Repository pattern",
              "complexity": "HIGH"
            }
          ],
          "business_logic": [],
          "procedures": [
            {
              "name": "INITIALIZE-TRANSACTION",
              "line": 285,
              "type": "PERFORM",
              "dotnet_equivalent": "private async Task InitializeTransactionAsync()"
            },
            {
              "name": "VALIDATE-USER-SESSION",
              "line": 291,
              "type": "PERFORM",
              "dotnet_equivalent": "private async Task ValidateUserSessionAsync()"
            },
            {
              "name": "ACCOUNT-INQUIRY",
              "line": 299,
              "type": "PERFORM",
              "dotnet_equivalent": "private async Task AccountInquiryAsync()"
            },
            {
              "name": "ACCOUNT-TRANSFER",
              "line": 301,
              "type": "PERFORM",
              "dotnet_equivalent": "private async Task AccountTransferAsync()"
            },
            {
              "name": "TRANSACTION-HISTORY",
              "line": 303,
              "type": "PERFORM",
              "dotnet_equivalent": "private async Task TransactionHistoryAsync()"
            },
            {
              "name": "ACCOUNT-BALANCE-UPDATE",
              "line": 305,
              "type": "PERFORM",
              "dotnet_equivalent": "private async Task AccountBalanceUpdateAsync()"
            },
            {
              "name": "BATCH-PROCESSING",
              "line": 307,
              "type": "PERFORM",
              "dotnet_equivalent": "private async Task BatchProcessingAsync()"
            },
            {
              "name": "INVALID-FUNCTION",
              "line": 309,
              "type": "PERFORM",
              "dotnet_equivalent": "private async Task InvalidFunctionAsync()"
            },
            {
              "name": "FINALIZE-TRANSACTION",
              "line": 317,
              "type": "PERFORM",
              "dotnet_equivalent": "private async Task FinalizeTransactionAsync()"
            },
            {
              "name": "START-AUDIT-LOG",
              "line": 351,
              "type": "PERFORM",
              "dotnet_equivalent": "private async Task StartAuditLogAsync()"
            },
            {
              "name": "INITIALIZE-TEMP-STORAGE",
              "line": 359,
              "type": "PERFORM",
              "dotnet_equivalent": "private async Task InitializeTempStorageAsync()"
            },
            {
              "name": "STORE-ACCOUNT-IN-TSQ",
              "line": 425,
              "type": "PERFORM",
              "dotnet_equivalent": "private async Task StoreAccountInTsqAsync()"
            },
            {
              "name": "SEND-ACCOUNT-MAP",
              "line": 429,
              "type": "PERFORM",
              "dotnet_equivalent": "private async Task SendAccountMapAsync()"
            },
            {
              "name": "HANDLE-FILE-ERROR",
              "line": 433,
              "type": "PERFORM",
              "dotnet_equivalent": "private async Task HandleFileErrorAsync()"
            },
            {
              "name": "VALIDATE-TRANSFER-REQUEST",
              "line": 443,
              "type": "PERFORM",
              "dotnet_equivalent": "private async Task ValidateTransferRequestAsync()"
            },
            {
              "name": "SEND-MQ-NOTIFICATION",
              "line": 627,
              "type": "PERFORM",
              "dotnet_equivalent": "private async Task SendMqNotificationAsync()"
            },
            {
              "name": "READ-TRANSACTION-HISTORY",
              "line": 649,
              "type": "PERFORM",
              "dotnet_equivalent": "private async Task ReadTransactionHistoryAsync()"
            },
            {
              "name": "STORE-TRANSACTION-IN-TSQ",
              "line": 683,
              "type": "PERFORM",
              "dotnet_equivalent": "private async Task StoreTransactionInTsqAsync()"
            },
            {
              "name": "SEND-HISTORY-MAP",
              "line": 699,
              "type": "PERFORM",
              "dotnet_equivalent": "private async Task SendHistoryMapAsync()"
            },
            {
              "name": "FORMAT-REPORT-LINE",
              "line": 777,
              "type": "PERFORM",
              "dotnet_equivalent": "private async Task FormatReportLineAsync()"
            },
            {
              "name": "WRITE-REPORT-LINE",
              "line": 779,
              "type": "PERFORM",
              "dotnet_equivalent": "private async Task WriteReportLineAsync()"
            },
            {
              "name": "END-AUDIT-LOG",
              "line": 905,
              "type": "PERFORM",
              "dotnet_equivalent": "private async Task EndAuditLogAsync()"
            }
          ],
          "data_movements": [
            {
              "line": 365,
              "statement": "MOVE ZERO TO WS-ERROR-COUNT.",
              "type": "MOVE",
              "dotnet_hint": "Property assignment or mapping"
            },
            {
              "line": 511,
              "statement": "MOVE ACC-BALANCE TO WS-OLD-BALANCE",
              "type": "MOVE",
              "dotnet_hint": "Property assignment or mapping"
            },
            {
              "line": 531,
              "statement": "MOVE 'INSUFFICIENT_FUNDS' TO WS-ERROR-CODE",
              "type": "MOVE",
              "dotnet_hint": "Property assignment or mapping"
            },
            {
              "line": 533,
              "statement": "MOVE DFHRESP(ERROR) TO WS-CICS-RESP",
              "type": "MOVE",
              "dotnet_hint": "Property assignment or mapping"
            },
            {
              "line": 543,
              "statement": "MOVE LK-TO-ACCOUNT TO ACC-NUMBER",
              "type": "MOVE",
              "dotnet_hint": "Property assignment or mapping"
            },
            {
              "line": 689,
              "statement": "MOVE 'Y' TO WS-EOF-FLAG",
              "type": "MOVE",
              "dotnet_hint": "Property assignment or mapping"
            },
            {
              "line": 783,
              "statement": "MOVE 'Y' TO WS-EOF-FLAG",
              "type": "MOVE",
              "dotnet_hint": "Property assignment or mapping"
            }
          ],
          "conditional_logic": [
            {
              "condition": "WS-AUDIT-FLAG = 'Y'",
              "line": 349,
              "complexity": "low"
            },
            {
              "condition": "WS-CICS-RESP = DFHRESP(NORMAL)",
              "line": 421,
              "complexity": "low"
            },
            {
              "condition": "WS-VALID-TRANS-FLAG = 'Y'",
              "line": 447,
              "complexity": "low"
            },
            {
              "condition": "WS-CICS-RESP = DFHRESP(NORMAL)",
              "line": 509,
              "complexity": "low"
            },
            {
              "condition": "ACC-BALANCE >= ZERO",
              "line": 517,
              "complexity": "low"
            },
            {
              "condition": "WS-CICS-RESP = DFHRESP(NORMAL)",
              "line": 561,
              "complexity": "low"
            },
            {
              "condition": "WS-CICS-RESP = DFHRESP(NORMAL)",
              "line": 647,
              "complexity": "low"
            },
            {
              "condition": "WS-CICS-RESP = DFHRESP(NORMAL)",
              "line": 681,
              "complexity": "low"
            },
            {
              "condition": "SQLCODE = 0",
              "line": 775,
              "complexity": "low"
            },
            {
              "condition": "WS-AUDIT-FLAG = 'Y'",
              "line": 903,
              "complexity": "low"
            }
          ],
          "state_mechanisms": {
            "TSQ_queues": [
              "AUDIT"
            ],
            "TDQ_queues": [],
            "COMMAREAs": [
              "DFHCOMMAREA",
              "LK-USER-ID"
            ],
            "CHANNELS": [
              "WS-CHANNEL-NAME"
            ],
            "CONTAINERS": [
              "WS-CONTAINER-NAME"
            ],
            "MAPSETS": [
              "WS-MAPSET"
            ],
            "TRANSIDS": [
              "BANK"
            ]
          },
          "performance_indicators": {
            "file_operations": 3,
            "database_operations": 2,
            "network_operations": 1,
            "loops": 22,
            "conditions": 10
          },
          "error_handling": [
            {
              "line": 161,
              "type": "error_handling",
              "statement": "01  WS-ERROR-AREA."
            },
            {
              "line": 163,
              "type": "error_handling",
              "statement": "05  WS-ERROR-CODE        PIC X(8)."
            },
            {
              "line": 165,
              "type": "error_handling",
              "statement": "05  WS-ERROR-MESSAGE     PIC X(80)."
            },
            {
              "line": 167,
              "type": "error_handling",
              "statement": "05  WS-CICS-RESP         PIC S9(8) COMP."
            },
            {
              "line": 169,
              "type": "error_handling",
              "statement": "05  WS-CICS-RESP2        PIC S9(8) COMP."
            },
            {
              "line": 229,
              "type": "error_handling",
              "statement": "05  WS-ERROR-COUNT       PIC S9(4) COMP VALUE ZERO."
            },
            {
              "line": 263,
              "type": "error_handling",
              "statement": "05  LK-ERROR-MESSAGE     PIC X(80)."
            },
            {
              "line": 273,
              "type": "error_handling",
              "statement": "COPY ERROR-CODES."
            },
            {
              "line": 365,
              "type": "error_handling",
              "statement": "MOVE ZERO TO WS-ERROR-COUNT."
            },
            {
              "line": 421,
              "type": "error_handling",
              "statement": "IF WS-CICS-RESP = DFHRESP(NORMAL)"
            },
            {
              "line": 433,
              "type": "error_handling",
              "statement": "PERFORM HANDLE-FILE-ERROR"
            },
            {
              "line": 509,
              "type": "error_handling",
              "statement": "IF WS-CICS-RESP = DFHRESP(NORMAL)"
            },
            {
              "line": 531,
              "type": "error_handling",
              "statement": "MOVE 'INSUFFICIENT_FUNDS' TO WS-ERROR-CODE"
            },
            {
              "line": 533,
              "type": "error_handling",
              "statement": "MOVE DFHRESP(ERROR) TO WS-CICS-RESP"
            },
            {
              "line": 561,
              "type": "error_handling",
              "statement": "IF WS-CICS-RESP = DFHRESP(NORMAL)"
            },
            {
              "line": 647,
              "type": "error_handling",
              "statement": "IF WS-CICS-RESP = DFHRESP(NORMAL)"
            },
            {
              "line": 681,
              "type": "error_handling",
              "statement": "IF WS-CICS-RESP = DFHRESP(NORMAL)"
            }
          ],
          "security_aspects": [],
          "metadata": {
            "total_lines": 0,
            "cics_commands_count": 16,
            "sql_blocks_count": 2,
            "business_logic_statements": 0,
            "procedures_count": 22,
            "complexity_score": 20,
            "modernization_score": 1
          },
          "dotnet_suggestions": {
            "service_name": "BankingService",
            "controller_name": "BankingController",
            "required_services": [
              "ICacheService",
              "IMediator",
              "IRepositoryService",
              "ITransactionService"
            ],
            "suggested_patterns": [
              "Mediator (MediatR)",
              "Command/Write Model",
              "Strategy or Template Method"
            ],
            "performance_considerations": [
              "Batch operations instead of loops"
            ],
            "security_recommendations": [
              "Use HTTPS for all endpoints",
              "Implement authentication & authorization",
              "Log sensitive operations"
            ]
          }
        },
        "batch.cbl": {
          "description": "COBOL CICS program",
          "program_id": "BATCHPROC",
          "copybooks": [],
          "control_includes": [],
          "file_descriptors": [
            {
              "name": "INPUT-FILE",
              "line": 39,
              "type": "Sequential"
            },
            {
              "name": "OUTPUT-FILE",
              "line": 51,
              "type": "Sequential"
            }
          ],
          "cics_commands": [],
          "sql_blocks": [],
          "business_logic": [],
          "procedures": [
            {
              "name": "UNTIL",
              "line": 85,
              "type": "PERFORM",
              "dotnet_equivalent": "private async Task UntilAsync()"
            },
            {
              "name": "PROCESS-RECORD",
              "line": 95,
              "type": "PERFORM",
              "dotnet_equivalent": "private async Task ProcessRecordAsync()"
            }
          ],
          "data_movements": [
            {
              "line": 123,
              "statement": "MOVE CUST-ID         TO OUT-CUST-ID",
              "type": "MOVE",
              "dotnet_hint": "Property assignment or mapping"
            },
            {
              "line": 125,
              "statement": "MOVE CUST-NAME       TO OUT-CUST-NAME",
              "type": "MOVE",
              "dotnet_hint": "Property assignment or mapping"
            },
            {
              "line": 127,
              "statement": "MOVE CUST-BALANCE    TO OUT-CUST-BALANCE",
              "type": "MOVE",
              "dotnet_hint": "Property assignment or mapping"
            }
          ],
          "conditional_logic": [],
          "state_mechanisms": {
            "TSQ_queues": [],
            "TDQ_queues": [],
            "COMMAREAs": [],
            "CHANNELS": [],
            "CONTAINERS": [],
            "MAPSETS": [],
            "TRANSIDS": []
          },
          "performance_indicators": {
            "file_operations": 2,
            "database_operations": 0,
            "network_operations": 0,
            "loops": 2,
            "conditions": 0
          },
          "error_handling": [],
          "security_aspects": [],
          "metadata": {
            "total_lines": 0,
            "cics_commands_count": 0,
            "sql_blocks_count": 0,
            "business_logic_statements": 0,
            "procedures_count": 2,
            "complexity_score": 0,
            "modernization_score": 10
          },
          "dotnet_suggestions": {
            "service_name": "BatchprocService",
            "controller_name": "BatchprocController",
            "required_services": [],
            "suggested_patterns": [
              "Strategy or Template Method"
            ],
            "performance_considerations": [],
            "security_recommendations": [
              "Use HTTPS for all endpoints",
              "Implement authentication & authorization",
              "Log sensitive operations"
            ]
          }
        },
        "cics.cbl": {
          "description": "COBOL CICS program",
          "program_id": "CICSCUST",
          "copybooks": [],
          "control_includes": [],
          "file_descriptors": [],
          "cics_commands": [
            {
              "line": 71,
              "verb": "INCLUDE",
              "command_type": "RECEIVE",
              "parameters": {
                "MAPSET": "CUSTMAP",
                "9": "7",
                "X": "20",
                "MAP": "CUSTMAP"
              },
              "raw_block": "EXEC CICS INCLUDE MAPSET(CUSTMAP) END-EXEC.    EXEC SQL  INCLUDE CUSTOMER-REC  END-EXEC.    01 CUST-REC.  05 CUST-ID           PIC 9(5).  05 CUST-NAME         PIC X(20).  05 CUST-BALANCE      PIC 9(7)V99.    PROCEDURE DIVISION.  ******************************************************************  * RECEIVE INPUT FROM TERMINAL  ******************************************************************  EXEC CICS RECEIVE MAP('CUSTMAP')  MAPSET('CUSTMAP')  END-EXEC",
              "dotnet_service": "IRequestService",
              "dotnet_method": "ReceiveRequestAsync",
              "conversion_hint": "Request binding and validation",
              "ai_conversion": "using System;\n\npublic class CustomerRecord\n{\n    public int CustomerId { get; set; }\n    public string CustomerName { get; set; }\n    public decimal CustomerBalance { get; set; }\n}\n\npublic class CicsReceiveExample\n{\n    public void ReceiveInput()\n    {\n        // Simulate receiving input from a terminal\n        CustomerRecord customerRecord = new CustomerRecord\n        {\n            CustomerId = 12345, // Example data\n            CustomerName = \"John Doe\", // Example data\n            CustomerBalance = 12345.67m // Example data\n        };\n\n        // Process the received data\n        Console.WriteLine($\"Customer ID: {customerRecord.CustomerId}\");\n        Console.WriteLine($\"Customer Name: {customerRecord.CustomerName}\");\n        Console.WriteLine($\"Customer Balance: {customerRecord.CustomerBalance}\");\n    }\n}",
              "complexity_score": 5,
              "performance_impact": "low",
              "security_considerations": []
            },
            {
              "line": 91,
              "verb": "READ",
              "command_type": "READ",
              "parameters": {
                "FILE": "CUSTOMR",
                "INTO": "CUST-REC",
                "RIDFLD": "WS-CUST-ID"
              },
              "raw_block": "EXEC CICS READ FILE('CUSTOMR')  INTO(CUST-REC)  RIDFLD(WS-CUST-ID)  END-EXEC",
              "dotnet_service": "IRepositoryService",
              "dotnet_method": "ReadAsync",
              "conversion_hint": "Entity Framework repository pattern",
              "ai_conversion": "using System;\nusing System.Data.SqlClient;\n\npublic class CustomerRecordReader\n{\n    private string connectionString = \"your_connection_string_here\";\n\n    public CustomerRecord ReadCustomerRecord(string customerId)\n    {\n        CustomerRecord customerRecord = null;\n\n        using (SqlConnection connection = new SqlConnection(connectionString))\n        {\n            connection.Open();\n            string query = \"SELECT * FROM CUSTOMR WHERE CustomerID = @CustomerID\";\n            using (SqlCommand command = new SqlCommand(query, connection))\n            {\n                command.Parameters.AddWithValue(\"@CustomerID\", customerId);\n\n                using (SqlDataReader reader = command.ExecuteReader())\n                {\n                    if (reader.Read())\n                    {\n                        customerRecord = new CustomerRecord\n                        {\n                            // Assuming CUST-REC has properties like Name, Address, etc.\n                            Name = reader[\"Name\"].ToString(),\n                            Address = reader[\"Address\"].ToString(),\n                            // Add other fields as necessary\n                        };\n                    }\n                }\n            }\n        }\n\n        return customerRecord;\n    }\n}\n\npublic class CustomerRecord\n{\n    public string Name { get; set; }\n    public string Address { get; set; }\n    // Add other properties as necessary\n}",
              "complexity_score": 3,
              "performance_impact": "medium",
              "security_considerations": []
            },
            {
              "line": 113,
              "verb": "SEND",
              "command_type": "SEND",
              "parameters": {
                "MAP": "CUSTMAP",
                "MAPSET": "CUSTMAP"
              },
              "raw_block": "EXEC CICS SEND MAP('CUSTMAP')  MAPSET('CUSTMAP')  END-EXEC",
              "dotnet_service": "IResponseService",
              "dotnet_method": "SendResponseAsync",
              "conversion_hint": "API response with view models",
              "ai_conversion": "using System;\n\npublic class CicsSendMap\n{\n    public void SendMap()\n    {\n        // Assuming a method to send a map in a CICS-like environment\n        SendMap(\"CUSTMAP\", \"CUSTMAP\");\n    }\n\n    private void SendMap(string map, string mapset)\n    {\n        // Implementation for sending the map\n        Console.WriteLine($\"Sending map '{map}' from mapset '{mapset}'\");\n    }\n}",
              "complexity_score": 2,
              "performance_impact": "low",
              "security_considerations": []
            },
            {
              "line": 120,
              "verb": "RETURN",
              "command_type": "RETURN",
              "parameters": {},
              "raw_block": "EXEC CICS RETURN END-EXEC.  ",
              "dotnet_service": "ITransactionService",
              "dotnet_method": "CompleteTransactionAsync",
              "conversion_hint": "Transaction completion",
              "ai_conversion": "// In a C# application, returning from a method can be done using the return statement.\nreturn;",
              "complexity_score": 0,
              "performance_impact": "low",
              "security_considerations": []
            }
          ],
          "sql_blocks": [],
          "business_logic": [],
          "procedures": [],
          "data_movements": [
            {
              "line": 75,
              "statement": "MOVE CUSTIDI TO WS-CUST-ID",
              "type": "MOVE",
              "dotnet_hint": "Property assignment or mapping"
            },
            {
              "line": 101,
              "statement": "MOVE CUST-ID        TO CUSTIDO",
              "type": "MOVE",
              "dotnet_hint": "Property assignment or mapping"
            },
            {
              "line": 103,
              "statement": "MOVE CUST-NAME      TO CUSTNAMO",
              "type": "MOVE",
              "dotnet_hint": "Property assignment or mapping"
            },
            {
              "line": 105,
              "statement": "MOVE CUST-BALANCE   TO CUSTBALO",
              "type": "MOVE",
              "dotnet_hint": "Property assignment or mapping"
            }
          ],
          "conditional_logic": [],
          "state_mechanisms": {
            "TSQ_queues": [],
            "TDQ_queues": [],
            "COMMAREAs": [],
            "CHANNELS": [],
            "CONTAINERS": [],
            "MAPSETS": [
              "CUSTMAP"
            ],
            "TRANSIDS": []
          },
          "performance_indicators": {
            "file_operations": 0,
            "database_operations": 0,
            "network_operations": 0,
            "loops": 0,
            "conditions": 0
          },
          "error_handling": [],
          "security_aspects": [],
          "metadata": {
            "total_lines": 0,
            "cics_commands_count": 4,
            "sql_blocks_count": 0,
            "business_logic_statements": 0,
            "procedures_count": 0,
            "complexity_score": 4,
            "modernization_score": 6
          },
          "dotnet_suggestions": {
            "service_name": "CicscustService",
            "controller_name": "CicscustController",
            "required_services": [
              "IRepositoryService",
              "IRequestService",
              "IResponseService",
              "ITransactionService"
            ],
            "suggested_patterns": [],
            "performance_considerations": [],
            "security_recommendations": [
              "Use HTTPS for all endpoints",
              "Implement authentication & authorization",
              "Log sensitive operations"
            ]
          }
        },
        "cobol_code.cbl": {
          "description": "COBOL CICS program",
          "program_id": "DBCONNECT",
          "copybooks": [],
          "control_includes": [],
          "file_descriptors": [],
          "cics_commands": [],
          "sql_blocks": [
            {
              "original_sql": "EXEC SQL\n\nINCLUDE SQLCA\n\nEND-EXEC.",
              "line_number": 53,
              "sql_type": "SELECT",
              "dotnet_equivalent": "// TODO: Convert SQL: EXEC SQL\n\nINCLUDE SQLCA\n\nEND-EXEC.",
              "entity_framework_hint": "Repository pattern",
              "complexity": "MEDIUM"
            },
            {
              "original_sql": "EXEC SQL BEGIN DECLARE SECTION END-EXEC.\n\n\n\n01 HV-EMP-ID                   PIC 9(5).\n\n01 HV-EMP-FIRST-NAME           PIC X(20).\n\n01 HV-EMP-LAST-NAME            PIC X(20).\n\n01 HV-EMP-DEPT                 PIC X(15).\n\n01 HV-EMP-POSITION             PIC X(20).\n\n01 HV-EMP-SALARY               PIC 9(7)V99.\n\n01 HV-EMP-HIRE-DATE            PIC X(10).\n\n01 HV-DB-USER                  PIC X(20).\n\n01 HV-DB-PASSWORD              PIC X(20).\n\n01 HV-SEARCH-DEPT              PIC X(15).\n\n01 HV-MIN-SALARY               PIC 9(7)V99.\n\n\n\nEXEC SQL END DECLARE SECTION END-EXEC.",
              "line_number": 195,
              "sql_type": "SELECT",
              "dotnet_equivalent": "// TODO: Convert SQL: EXEC SQL BEGIN DECLARE SECTION END-EXEC.\n\n\n\n01 HV-EMP-ID                   PIC 9(5).\n\n01 HV-EMP-FIRST-NAME           PIC X(20).\n\n01 HV-EMP-LAST-NAME            PIC X(20).\n\n01 HV-EMP-DEPT                 PIC X(15).\n\n01 HV-EMP-POSITION             PIC X(20).\n\n01 HV-EMP-SALARY               PIC 9(7)V99.\n\n01 HV-EMP-HIRE-DATE            PIC X(10).\n\n01 HV-DB-USER                  PIC X(20).\n\n01 HV-DB-PASSWORD              PIC X(20).\n\n01 HV-SEARCH-DEPT              PIC X(15).\n\n01 HV-MIN-SALARY               PIC 9(7)V99.\n\n\n\nEXEC SQL END DECLARE SECTION END-EXEC.",
              "entity_framework_hint": "Repository pattern",
              "complexity": "MEDIUM"
            },
            {
              "original_sql": "EXEC SQL END DECLARE SECTION END-EXEC.\n\n\n\n*-----------------------------------------------------------------\n\n* Cursor Declarations\n\n*-----------------------------------------------------------------\n\nEXEC SQL\n\nDECLARE EMP_CURSOR CURSOR FOR\n\nSELECT EMP_ID, FIRST_NAME, LAST_NAME, DEPARTMENT,\n\nPOSITION, SALARY, HIRE_DATE\n\nFROM EMPLOYEES\n\nORDER BY EMP_ID\n\nEND-EXEC.",
              "line_number": 217,
              "sql_type": "CURSOR",
              "dotnet_equivalent": "var results = await _context.EntitySet.ToListAsync();",
              "entity_framework_hint": "LINQ Query with projection",
              "complexity": "HIGH"
            },
            {
              "original_sql": "EXEC SQL\n\nDECLARE DEPT_CURSOR CURSOR FOR\n\nSELECT EMP_ID, FIRST_NAME, LAST_NAME, DEPARTMENT,\n\nPOSITION, SALARY, HIRE_DATE\n\nFROM EMPLOYEES\n\nWHERE DEPARTMENT = :HV-SEARCH-DEPT\n\nAND SALARY >= :HV-MIN-SALARY\n\nORDER BY SALARY DESC\n\nEND-EXEC.",
              "line_number": 237,
              "sql_type": "CURSOR",
              "dotnet_equivalent": "var results = await _context.EntitySet.ToListAsync();",
              "entity_framework_hint": "LINQ Query with projection",
              "complexity": "HIGH"
            },
            {
              "original_sql": "EXEC SQL\n\nCONNECT TO :WS-DB-NAME\n\nUSER :HV-DB-USER\n\nUSING :HV-DB-PASSWORD\n\nEND-EXEC.",
              "line_number": 335,
              "sql_type": "SELECT",
              "dotnet_equivalent": "// TODO: Convert SQL: EXEC SQL\n\nCONNECT TO :WS-DB-NAME\n\nUSER :HV-DB-USER\n\nUSING :HV-DB-PASSWORD\n\nEND-EXEC.",
              "entity_framework_hint": "Repository pattern",
              "complexity": "MEDIUM"
            },
            {
              "original_sql": "EXEC SQL\n\nOPEN EMP_CURSOR\n\nEND-EXEC.",
              "line_number": 479,
              "sql_type": "SELECT",
              "dotnet_equivalent": "// TODO: Convert SQL: EXEC SQL\n\nOPEN EMP_CURSOR\n\nEND-EXEC.",
              "entity_framework_hint": "Repository pattern",
              "complexity": "HIGH"
            },
            {
              "original_sql": "EXEC SQL\n\nCLOSE EMP_CURSOR\n\nEND-EXEC",
              "line_number": 511,
              "sql_type": "SELECT",
              "dotnet_equivalent": "// TODO: Convert SQL: EXEC SQL\n\nCLOSE EMP_CURSOR\n\nEND-EXEC",
              "entity_framework_hint": "Repository pattern",
              "complexity": "HIGH"
            },
            {
              "original_sql": "EXEC SQL\n\nFETCH EMP_CURSOR INTO\n\n:HV-EMP-ID,\n\n:HV-EMP-FIRST-NAME,\n\n:HV-EMP-LAST-NAME,\n\n:HV-EMP-DEPT,\n\n:HV-EMP-POSITION,\n\n:HV-EMP-SALARY,\n\n:HV-EMP-HIRE-DATE\n\nEND-EXEC.",
              "line_number": 543,
              "sql_type": "SELECT",
              "dotnet_equivalent": "// TODO: Convert SQL: EXEC SQL\n\nFETCH EMP_CURSOR INTO\n\n:HV-EMP-ID,\n\n:HV-EMP-FIRST-NAME,\n\n:HV-EMP-LAST-NAME,\n\n:HV-EMP-DEPT,\n\n:HV-EMP-POSITION,\n\n:HV-EMP-SALARY,\n\n:HV-EMP-HIRE-DATE\n\nEND-EXEC.",
              "entity_framework_hint": "Repository pattern",
              "complexity": "HIGH"
            },
            {
              "original_sql": "EXEC SQL\n\nOPEN DEPT_CURSOR\n\nEND-EXEC.",
              "line_number": 629,
              "sql_type": "SELECT",
              "dotnet_equivalent": "// TODO: Convert SQL: EXEC SQL\n\nOPEN DEPT_CURSOR\n\nEND-EXEC.",
              "entity_framework_hint": "Repository pattern",
              "complexity": "HIGH"
            },
            {
              "original_sql": "EXEC SQL\n\nCLOSE DEPT_CURSOR\n\nEND-EXEC",
              "line_number": 661,
              "sql_type": "SELECT",
              "dotnet_equivalent": "// TODO: Convert SQL: EXEC SQL\n\nCLOSE DEPT_CURSOR\n\nEND-EXEC",
              "entity_framework_hint": "Repository pattern",
              "complexity": "HIGH"
            },
            {
              "original_sql": "EXEC SQL\n\nFETCH DEPT_CURSOR INTO\n\n:HV-EMP-ID,\n\n:HV-EMP-FIRST-NAME,\n\n:HV-EMP-LAST-NAME,\n\n:HV-EMP-DEPT,\n\n:HV-EMP-POSITION,\n\n:HV-EMP-SALARY,\n\n:HV-EMP-HIRE-DATE\n\nEND-EXEC.",
              "line_number": 693,
              "sql_type": "SELECT",
              "dotnet_equivalent": "// TODO: Convert SQL: EXEC SQL\n\nFETCH DEPT_CURSOR INTO\n\n:HV-EMP-ID,\n\n:HV-EMP-FIRST-NAME,\n\n:HV-EMP-LAST-NAME,\n\n:HV-EMP-DEPT,\n\n:HV-EMP-POSITION,\n\n:HV-EMP-SALARY,\n\n:HV-EMP-HIRE-DATE\n\nEND-EXEC.",
              "entity_framework_hint": "Repository pattern",
              "complexity": "HIGH"
            },
            {
              "original_sql": "EXEC SQL\n\nINSERT INTO EMPLOYEES\n\n(EMP_ID, FIRST_NAME, LAST_NAME, DEPARTMENT,\n\nPOSITION, SALARY, HIRE_DATE)\n\nVALUES\n\n(:HV-EMP-ID, :HV-EMP-FIRST-NAME, :HV-EMP-LAST-NAME,\n\n:HV-EMP-DEPT, :HV-EMP-POSITION, :HV-EMP-SALARY,\n\n:HV-EMP-HIRE-DATE)\n\nEND-EXEC.",
              "line_number": 825,
              "sql_type": "INSERT",
              "dotnet_equivalent": "await _context.EntitySet.AddAsync(entity); await _context.SaveChangesAsync();",
              "entity_framework_hint": "Add + SaveChanges pattern",
              "complexity": "MEDIUM"
            },
            {
              "original_sql": "EXEC SQL\n\nCOMMIT WORK\n\nEND-EXEC",
              "line_number": 847,
              "sql_type": "SELECT",
              "dotnet_equivalent": "// TODO: Convert SQL: EXEC SQL\n\nCOMMIT WORK\n\nEND-EXEC",
              "entity_framework_hint": "Repository pattern",
              "complexity": "MEDIUM"
            },
            {
              "original_sql": "EXEC SQL\n\nROLLBACK WORK\n\nEND-EXEC",
              "line_number": 855,
              "sql_type": "SELECT",
              "dotnet_equivalent": "// TODO: Convert SQL: EXEC SQL\n\nROLLBACK WORK\n\nEND-EXEC",
              "entity_framework_hint": "Repository pattern",
              "complexity": "MEDIUM"
            },
            {
              "original_sql": "EXEC SQL\n\nSELECT FIRST_NAME, LAST_NAME, DEPARTMENT,\n\nPOSITION, SALARY, HIRE_DATE\n\nINTO :HV-EMP-FIRST-NAME, :HV-EMP-LAST-NAME,\n\n:HV-EMP-DEPT, :HV-EMP-POSITION,\n\n:HV-EMP-SALARY, :HV-EMP-HIRE-DATE\n\nFROM EMPLOYEES\n\nWHERE EMP_ID = :HV-EMP-ID\n\nEND-EXEC.",
              "line_number": 903,
              "sql_type": "SELECT",
              "dotnet_equivalent": "var results = await _context.EntitySet.ToListAsync();",
              "entity_framework_hint": "LINQ Query with projection",
              "complexity": "MEDIUM"
            },
            {
              "original_sql": "EXEC SQL\n\nUPDATE EMPLOYEES\n\nSET DEPARTMENT = :HV-EMP-DEPT,\n\nPOSITION = :HV-EMP-POSITION,\n\nSALARY = :HV-EMP-SALARY\n\nWHERE EMP_ID = :HV-EMP-ID\n\nEND-EXEC",
              "line_number": 1005,
              "sql_type": "UPDATE",
              "dotnet_equivalent": "_context.EntitySet.Update(entity); await _context.SaveChangesAsync();",
              "entity_framework_hint": "Update + SaveChanges pattern",
              "complexity": "MEDIUM"
            },
            {
              "original_sql": "EXEC SQL\n\nCOMMIT WORK\n\nEND-EXEC",
              "line_number": 1027,
              "sql_type": "SELECT",
              "dotnet_equivalent": "// TODO: Convert SQL: EXEC SQL\n\nCOMMIT WORK\n\nEND-EXEC",
              "entity_framework_hint": "Repository pattern",
              "complexity": "MEDIUM"
            },
            {
              "original_sql": "EXEC SQL\n\nROLLBACK WORK\n\nEND-EXEC",
              "line_number": 1035,
              "sql_type": "SELECT",
              "dotnet_equivalent": "// TODO: Convert SQL: EXEC SQL\n\nROLLBACK WORK\n\nEND-EXEC",
              "entity_framework_hint": "Repository pattern",
              "complexity": "MEDIUM"
            },
            {
              "original_sql": "EXEC SQL\n\nSELECT FIRST_NAME, LAST_NAME\n\nINTO :HV-EMP-FIRST-NAME, :HV-EMP-LAST-NAME\n\nFROM EMPLOYEES\n\nWHERE EMP_ID = :HV-EMP-ID\n\nEND-EXEC.",
              "line_number": 1091,
              "sql_type": "SELECT",
              "dotnet_equivalent": "var results = await _context.EntitySet.ToListAsync();",
              "entity_framework_hint": "LINQ Query with projection",
              "complexity": "MEDIUM"
            },
            {
              "original_sql": "EXEC SQL\n\nDELETE FROM EMPLOYEES\n\nWHERE EMP_ID = :HV-EMP-ID\n\nEND-EXEC",
              "line_number": 1123,
              "sql_type": "DELETE",
              "dotnet_equivalent": "_context.EntitySet.Remove(entity); await _context.SaveChangesAsync();",
              "entity_framework_hint": "Remove + SaveChanges pattern",
              "complexity": "MEDIUM"
            },
            {
              "original_sql": "EXEC SQL\n\nCOMMIT WORK\n\nEND-EXEC",
              "line_number": 1145,
              "sql_type": "SELECT",
              "dotnet_equivalent": "// TODO: Convert SQL: EXEC SQL\n\nCOMMIT WORK\n\nEND-EXEC",
              "entity_framework_hint": "Repository pattern",
              "complexity": "MEDIUM"
            },
            {
              "original_sql": "EXEC SQL\n\nROLLBACK WORK\n\nEND-EXEC",
              "line_number": 1153,
              "sql_type": "SELECT",
              "dotnet_equivalent": "// TODO: Convert SQL: EXEC SQL\n\nROLLBACK WORK\n\nEND-EXEC",
              "entity_framework_hint": "Repository pattern",
              "complexity": "MEDIUM"
            },
            {
              "original_sql": "EXEC SQL\n\nDISCONNECT CURRENT\n\nEND-EXEC",
              "line_number": 1225,
              "sql_type": "SELECT",
              "dotnet_equivalent": "// TODO: Convert SQL: EXEC SQL\n\nDISCONNECT CURRENT\n\nEND-EXEC",
              "entity_framework_hint": "Repository pattern",
              "complexity": "MEDIUM"
            }
          ],
          "business_logic": [],
          "procedures": [
            {
              "name": "1000-INITIALIZE",
              "line": 259,
              "type": "PERFORM",
              "dotnet_equivalent": "private async Task 1000InitializeAsync()"
            },
            {
              "name": "2000-PROCESS-USER-CHOICE",
              "line": 265,
              "type": "PERFORM",
              "dotnet_equivalent": "private async Task 2000ProcessUserChoiceAsync()"
            },
            {
              "name": "9000-TERMINATE",
              "line": 273,
              "type": "PERFORM",
              "dotnet_equivalent": "private async Task 9000TerminateAsync()"
            },
            {
              "name": "1100-CONNECT-TO-DB",
              "line": 303,
              "type": "PERFORM",
              "dotnet_equivalent": "private async Task 1100ConnectToDbAsync()"
            },
            {
              "name": "8000-CHECK-SQL-STATUS",
              "line": 339,
              "type": "PERFORM",
              "dotnet_equivalent": "private async Task 8000CheckSqlStatusAsync()"
            },
            {
              "name": "2100-DISPLAY-MENU",
              "line": 369,
              "type": "PERFORM",
              "dotnet_equivalent": "private async Task 2100DisplayMenuAsync()"
            },
            {
              "name": "3000-RETRIEVE-ALL-EMPLOYEES",
              "line": 379,
              "type": "PERFORM",
              "dotnet_equivalent": "private async Task 3000RetrieveAllEmployeesAsync()"
            },
            {
              "name": "3100-RETRIEVE-BY-CRITERIA",
              "line": 383,
              "type": "PERFORM",
              "dotnet_equivalent": "private async Task 3100RetrieveByCriteriaAsync()"
            },
            {
              "name": "4000-INSERT-EMPLOYEE",
              "line": 387,
              "type": "PERFORM",
              "dotnet_equivalent": "private async Task 4000InsertEmployeeAsync()"
            },
            {
              "name": "5000-UPDATE-EMPLOYEE",
              "line": 391,
              "type": "PERFORM",
              "dotnet_equivalent": "private async Task 5000UpdateEmployeeAsync()"
            },
            {
              "name": "6000-DELETE-EMPLOYEE",
              "line": 395,
              "type": "PERFORM",
              "dotnet_equivalent": "private async Task 6000DeleteEmployeeAsync()"
            },
            {
              "name": "ANOTHER",
              "line": 413,
              "type": "PERFORM",
              "dotnet_equivalent": "private async Task AnotherAsync()"
            },
            {
              "name": "8000-CHECK-SQL-STATUS",
              "line": 483,
              "type": "PERFORM",
              "dotnet_equivalent": "private async Task 8000CheckSqlStatusAsync()"
            },
            {
              "name": "3050-FETCH-EMPLOYEE-RECORD",
              "line": 495,
              "type": "PERFORM",
              "dotnet_equivalent": "private async Task 3050FetchEmployeeRecordAsync()"
            },
            {
              "name": "8000-CHECK-SQL-STATUS",
              "line": 577,
              "type": "PERFORM",
              "dotnet_equivalent": "private async Task 8000CheckSqlStatusAsync()"
            },
            {
              "name": "8000-CHECK-SQL-STATUS",
              "line": 633,
              "type": "PERFORM",
              "dotnet_equivalent": "private async Task 8000CheckSqlStatusAsync()"
            },
            {
              "name": "3150-FETCH-DEPT-RECORD",
              "line": 645,
              "type": "PERFORM",
              "dotnet_equivalent": "private async Task 3150FetchDeptRecordAsync()"
            },
            {
              "name": "8000-CHECK-SQL-STATUS",
              "line": 727,
              "type": "PERFORM",
              "dotnet_equivalent": "private async Task 8000CheckSqlStatusAsync()"
            },
            {
              "name": "8000-CHECK-SQL-STATUS",
              "line": 829,
              "type": "PERFORM",
              "dotnet_equivalent": "private async Task 8000CheckSqlStatusAsync()"
            },
            {
              "name": "8000-CHECK-SQL-STATUS",
              "line": 907,
              "type": "PERFORM",
              "dotnet_equivalent": "private async Task 8000CheckSqlStatusAsync()"
            },
            {
              "name": "8000-CHECK-SQL-STATUS",
              "line": 1009,
              "type": "PERFORM",
              "dotnet_equivalent": "private async Task 8000CheckSqlStatusAsync()"
            },
            {
              "name": "8000-CHECK-SQL-STATUS",
              "line": 1047,
              "type": "PERFORM",
              "dotnet_equivalent": "private async Task 8000CheckSqlStatusAsync()"
            },
            {
              "name": "8000-CHECK-SQL-STATUS",
              "line": 1095,
              "type": "PERFORM",
              "dotnet_equivalent": "private async Task 8000CheckSqlStatusAsync()"
            },
            {
              "name": "8000-CHECK-SQL-STATUS",
              "line": 1127,
              "type": "PERFORM",
              "dotnet_equivalent": "private async Task 8000CheckSqlStatusAsync()"
            },
            {
              "name": "8000-CHECK-SQL-STATUS",
              "line": 1171,
              "type": "PERFORM",
              "dotnet_equivalent": "private async Task 8000CheckSqlStatusAsync()"
            },
            {
              "name": "8000-CHECK-SQL-STATUS",
              "line": 1229,
              "type": "PERFORM",
              "dotnet_equivalent": "private async Task 8000CheckSqlStatusAsync()"
            }
          ],
          "data_movements": [
            {
              "line": 297,
              "statement": "MOVE \"N\" TO WS-END-OF-DATA.",
              "type": "MOVE",
              "dotnet_hint": "Property assignment or mapping"
            },
            {
              "line": 299,
              "statement": "MOVE \"N\" TO WS-DB-CONNECTED.",
              "type": "MOVE",
              "dotnet_hint": "Property assignment or mapping"
            },
            {
              "line": 321,
              "statement": "MOVE WS-DB-USER TO HV-DB-USER.",
              "type": "MOVE",
              "dotnet_hint": "Property assignment or mapping"
            },
            {
              "line": 323,
              "statement": "MOVE WS-DB-PASSWORD TO HV-DB-PASSWORD.",
              "type": "MOVE",
              "dotnet_hint": "Property assignment or mapping"
            },
            {
              "line": 345,
              "statement": "MOVE \"Y\" TO WS-DB-CONNECTED",
              "type": "MOVE",
              "dotnet_hint": "Property assignment or mapping"
            },
            {
              "line": 399,
              "statement": "MOVE \"N\" TO WS-CONTINUE-CHOICE",
              "type": "MOVE",
              "dotnet_hint": "Property assignment or mapping"
            },
            {
              "line": 471,
              "statement": "MOVE \"N\" TO WS-END-OF-DATA.",
              "type": "MOVE",
              "dotnet_hint": "Property assignment or mapping"
            },
            {
              "line": 553,
              "statement": "MOVE HV-EMP-SALARY TO WS-FORMATTED-SALARY",
              "type": "MOVE",
              "dotnet_hint": "Property assignment or mapping"
            },
            {
              "line": 573,
              "statement": "MOVE \"Y\" TO WS-END-OF-DATA",
              "type": "MOVE",
              "dotnet_hint": "Property assignment or mapping"
            },
            {
              "line": 613,
              "statement": "MOVE WS-SEARCH-DEPT TO HV-SEARCH-DEPT.",
              "type": "MOVE",
              "dotnet_hint": "Property assignment or mapping"
            },
            {
              "line": 615,
              "statement": "MOVE WS-SEARCH-MIN-SALARY TO HV-MIN-SALARY.",
              "type": "MOVE",
              "dotnet_hint": "Property assignment or mapping"
            },
            {
              "line": 621,
              "statement": "MOVE \"N\" TO WS-END-OF-DATA.",
              "type": "MOVE",
              "dotnet_hint": "Property assignment or mapping"
            },
            {
              "line": 703,
              "statement": "MOVE HV-EMP-SALARY TO WS-FORMATTED-SALARY",
              "type": "MOVE",
              "dotnet_hint": "Property assignment or mapping"
            },
            {
              "line": 723,
              "statement": "MOVE \"Y\" TO WS-END-OF-DATA",
              "type": "MOVE",
              "dotnet_hint": "Property assignment or mapping"
            },
            {
              "line": 793,
              "statement": "MOVE WS-EMP-ID TO HV-EMP-ID.",
              "type": "MOVE",
              "dotnet_hint": "Property assignment or mapping"
            },
            {
              "line": 795,
              "statement": "MOVE WS-EMP-FIRST-NAME TO HV-EMP-FIRST-NAME.",
              "type": "MOVE",
              "dotnet_hint": "Property assignment or mapping"
            },
            {
              "line": 797,
              "statement": "MOVE WS-EMP-LAST-NAME TO HV-EMP-LAST-NAME.",
              "type": "MOVE",
              "dotnet_hint": "Property assignment or mapping"
            },
            {
              "line": 799,
              "statement": "MOVE WS-EMP-DEPT TO HV-EMP-DEPT.",
              "type": "MOVE",
              "dotnet_hint": "Property assignment or mapping"
            },
            {
              "line": 801,
              "statement": "MOVE WS-EMP-POSITION TO HV-EMP-POSITION.",
              "type": "MOVE",
              "dotnet_hint": "Property assignment or mapping"
            },
            {
              "line": 803,
              "statement": "MOVE WS-EMP-SALARY TO HV-EMP-SALARY.",
              "type": "MOVE",
              "dotnet_hint": "Property assignment or mapping"
            },
            {
              "line": 805,
              "statement": "MOVE WS-EMP-HIRE-DATE TO HV-EMP-HIRE-DATE.",
              "type": "MOVE",
              "dotnet_hint": "Property assignment or mapping"
            },
            {
              "line": 883,
              "statement": "MOVE WS-EMP-ID TO HV-EMP-ID.",
              "type": "MOVE",
              "dotnet_hint": "Property assignment or mapping"
            },
            {
              "line": 913,
              "statement": "MOVE HV-EMP-FIRST-NAME TO WS-EMP-FIRST-NAME",
              "type": "MOVE",
              "dotnet_hint": "Property assignment or mapping"
            },
            {
              "line": 915,
              "statement": "MOVE HV-EMP-LAST-NAME TO WS-EMP-LAST-NAME",
              "type": "MOVE",
              "dotnet_hint": "Property assignment or mapping"
            },
            {
              "line": 917,
              "statement": "MOVE HV-EMP-DEPT TO WS-EMP-DEPT",
              "type": "MOVE",
              "dotnet_hint": "Property assignment or mapping"
            },
            {
              "line": 919,
              "statement": "MOVE HV-EMP-POSITION TO WS-EMP-POSITION",
              "type": "MOVE",
              "dotnet_hint": "Property assignment or mapping"
            },
            {
              "line": 921,
              "statement": "MOVE HV-EMP-SALARY TO WS-EMP-SALARY",
              "type": "MOVE",
              "dotnet_hint": "Property assignment or mapping"
            },
            {
              "line": 923,
              "statement": "MOVE HV-EMP-HIRE-DATE TO WS-EMP-HIRE-DATE",
              "type": "MOVE",
              "dotnet_hint": "Property assignment or mapping"
            },
            {
              "line": 955,
              "statement": "MOVE HV-EMP-DEPT TO WS-EMP-DEPT",
              "type": "MOVE",
              "dotnet_hint": "Property assignment or mapping"
            },
            {
              "line": 967,
              "statement": "MOVE HV-EMP-POSITION TO WS-EMP-POSITION",
              "type": "MOVE",
              "dotnet_hint": "Property assignment or mapping"
            },
            {
              "line": 979,
              "statement": "MOVE HV-EMP-SALARY TO WS-EMP-SALARY",
              "type": "MOVE",
              "dotnet_hint": "Property assignment or mapping"
            },
            {
              "line": 985,
              "statement": "MOVE WS-EMP-DEPT TO HV-EMP-DEPT",
              "type": "MOVE",
              "dotnet_hint": "Property assignment or mapping"
            },
            {
              "line": 987,
              "statement": "MOVE WS-EMP-POSITION TO HV-EMP-POSITION",
              "type": "MOVE",
              "dotnet_hint": "Property assignment or mapping"
            },
            {
              "line": 989,
              "statement": "MOVE WS-EMP-SALARY TO HV-EMP-SALARY",
              "type": "MOVE",
              "dotnet_hint": "Property assignment or mapping"
            },
            {
              "line": 1077,
              "statement": "MOVE WS-EMP-ID TO HV-EMP-ID.",
              "type": "MOVE",
              "dotnet_hint": "Property assignment or mapping"
            },
            {
              "line": 1187,
              "statement": "MOVE SQLCODE TO WS-SQL-STATUS.",
              "type": "MOVE",
              "dotnet_hint": "Property assignment or mapping"
            },
            {
              "line": 1189,
              "statement": "MOVE SQLERRMC TO WS-SQL-MSG.",
              "type": "MOVE",
              "dotnet_hint": "Property assignment or mapping"
            }
          ],
          "conditional_logic": [
            {
              "condition": "DB-CONNECTED",
              "line": 263,
              "complexity": "low"
            },
            {
              "condition": "SQLCODE = 0",
              "line": 343,
              "complexity": "low"
            },
            {
              "condition": "WS-CONTINUE-CHOICE NOT = \"N\" AND WS-OPERATION-CHOICE NOT = 9",
              "line": 409,
              "complexity": "medium"
            },
            {
              "condition": "SQLCODE = 0",
              "line": 487,
              "complexity": "low"
            },
            {
              "condition": "SQLCODE = 0",
              "line": 547,
              "complexity": "low"
            },
            {
              "condition": "SQLCODE = 100",
              "line": 571,
              "complexity": "low"
            },
            {
              "condition": "SQLCODE = 0",
              "line": 637,
              "complexity": "low"
            },
            {
              "condition": "SQLCODE = 0",
              "line": 697,
              "complexity": "low"
            },
            {
              "condition": "SQLCODE = 100",
              "line": 721,
              "complexity": "low"
            },
            {
              "condition": "SQLCODE = 0",
              "line": 833,
              "complexity": "low"
            },
            {
              "condition": "SQLCODE = 0",
              "line": 911,
              "complexity": "low"
            },
            {
              "condition": "WS-EMP-DEPT = SPACES",
              "line": 953,
              "complexity": "low"
            },
            {
              "condition": "WS-EMP-POSITION = SPACES",
              "line": 965,
              "complexity": "low"
            },
            {
              "condition": "WS-EMP-SALARY = ZEROES",
              "line": 977,
              "complexity": "low"
            },
            {
              "condition": "SQLCODE = 0",
              "line": 1013,
              "complexity": "low"
            },
            {
              "condition": "SQLCODE = 100",
              "line": 1041,
              "complexity": "low"
            },
            {
              "condition": "SQLCODE = 0",
              "line": 1099,
              "complexity": "low"
            },
            {
              "condition": "WS-CONTINUE-CHOICE = \"Y\" OR WS-CONTINUE-CHOICE = \"Y\"",
              "line": 1115,
              "complexity": "medium"
            },
            {
              "condition": "SQLCODE = 0",
              "line": 1131,
              "complexity": "low"
            },
            {
              "condition": "SQLCODE = 100",
              "line": 1165,
              "complexity": "low"
            },
            {
              "condition": "SQLCODE < 0",
              "line": 1193,
              "complexity": "low"
            },
            {
              "condition": "DB-CONNECTED",
              "line": 1219,
              "complexity": "low"
            },
            {
              "condition": "SQLCODE = 0",
              "line": 1233,
              "complexity": "low"
            }
          ],
          "state_mechanisms": {
            "TSQ_queues": [],
            "TDQ_queues": [],
            "COMMAREAs": [],
            "CHANNELS": [],
            "CONTAINERS": [],
            "MAPSETS": [],
            "TRANSIDS": []
          },
          "performance_indicators": {
            "file_operations": 0,
            "database_operations": 23,
            "network_operations": 0,
            "loops": 26,
            "conditions": 23
          },
          "error_handling": [
            {
              "line": 123,
              "type": "error_handling",
              "statement": "01 WS-ERROR-HANDLING."
            },
            {
              "line": 129,
              "type": "error_handling",
              "statement": "05 WS-ERROR-MSG             PIC X(100)."
            },
            {
              "line": 293,
              "type": "error_handling",
              "statement": "WS-ERROR-HANDLING."
            },
            {
              "line": 353,
              "type": "error_handling",
              "statement": "DISPLAY \"SQL Error Code: \" SQLCODE"
            },
            {
              "line": 355,
              "type": "error_handling",
              "statement": "DISPLAY \"SQL Error Message: \" SQLERRMC"
            },
            {
              "line": 1195,
              "type": "error_handling",
              "statement": "STRING \"SQL ERROR: \" DELIMITED BY SIZE"
            },
            {
              "line": 1203,
              "type": "error_handling",
              "statement": "INTO WS-ERROR-MSG"
            },
            {
              "line": 1205,
              "type": "error_handling",
              "statement": "DISPLAY WS-ERROR-MSG"
            },
            {
              "line": 1239,
              "type": "error_handling",
              "statement": "DISPLAY \"Error during database disconnect.\""
            }
          ],
          "security_aspects": [],
          "metadata": {
            "total_lines": 0,
            "cics_commands_count": 0,
            "sql_blocks_count": 23,
            "business_logic_statements": 0,
            "procedures_count": 26,
            "complexity_score": 46,
            "modernization_score": 1
          },
          "dotnet_suggestions": {
            "service_name": "DbconnectService",
            "controller_name": "DbconnectController",
            "required_services": [],
            "suggested_patterns": [
              "Strategy or Template Method"
            ],
            "performance_considerations": [
              "Batch operations instead of loops",
              "Use EF Change Tracking wisely"
            ],
            "security_recommendations": [
              "Use HTTPS for all endpoints",
              "Implement authentication & authorization",
              "Log sensitive operations"
            ]
          }
        },
        "factorial.cbl": {
          "description": "COBOL CICS program",
          "program_id": "ADD-TWO-NUMBERS",
          "copybooks": [],
          "control_includes": [],
          "file_descriptors": [],
          "cics_commands": [],
          "sql_blocks": [],
          "business_logic": [],
          "procedures": [],
          "data_movements": [],
          "conditional_logic": [],
          "state_mechanisms": {
            "TSQ_queues": [],
            "TDQ_queues": [],
            "COMMAREAs": [],
            "CHANNELS": [],
            "CONTAINERS": [],
            "MAPSETS": [],
            "TRANSIDS": []
          },
          "performance_indicators": {
            "file_operations": 0,
            "database_operations": 0,
            "network_operations": 0,
            "loops": 0,
            "conditions": 0
          },
          "error_handling": [],
          "security_aspects": [],
          "metadata": {
            "total_lines": 0,
            "cics_commands_count": 0,
            "sql_blocks_count": 0,
            "business_logic_statements": 0,
            "procedures_count": 0,
            "complexity_score": 0,
            "modernization_score": 10
          },
          "dotnet_suggestions": {
            "service_name": "AddTwoNumbersService",
            "controller_name": "AddTwoNumbersController",
            "required_services": [],
            "suggested_patterns": [],
            "performance_considerations": [],
            "security_recommendations": [
              "Use HTTPS for all endpoints",
              "Implement authentication & authorization",
              "Log sensitive operations"
            ]
          }
        }
      },
      "copybooks": {
        "ACCOUNT-VALIDATION.CPY": {
          "description": "COBOL copybook defining a data structure",
          "fields": [
            {
              "level": "05",
              "name": "VALID-ACC-NUMBER",
              "pic": "9(14).",
              "line_number": 5,
              "cobol_type": "numeric_decimal",
              "dotnet_property": {
                "name": "ValidAccNumber",
                "type": "decimal",
                "original_name": "VALID-ACC-NUMBER",
                "pic_clause": "9(14)."
              },
              "java_property": {
                "name": "validAccNumber",
                "type": "BigDecimal",
                "original_name": "VALID-ACC-NUMBER",
                "pic_clause": "9(14)."
              },
              "validation_hints": [
                "Numeric"
              ],
              "is_key_field": true,
              "is_required": true
            },
            {
              "level": "05",
              "name": "VALID-ACC-TYPE",
              "pic": "X(2).",
              "line_number": 7,
              "cobol_type": "alphanumeric",
              "dotnet_property": {
                "name": "ValidAccType",
                "type": "string",
                "original_name": "VALID-ACC-TYPE",
                "pic_clause": "X(2)."
              },
              "java_property": {
                "name": "validAccType",
                "type": "String",
                "original_name": "VALID-ACC-TYPE",
                "pic_clause": "X(2)."
              },
              "validation_hints": [
                "MaxLength=2"
              ],
              "is_key_field": true,
              "is_required": true
            },
            {
              "level": "05",
              "name": "VALID-STATUS",
              "pic": "X.",
              "line_number": 9,
              "cobol_type": "alphanumeric",
              "dotnet_property": {
                "name": "ValidStatus",
                "type": "string",
                "original_name": "VALID-STATUS",
                "pic_clause": "X."
              },
              "java_property": {
                "name": "validStatus",
                "type": "String",
                "original_name": "VALID-STATUS",
                "pic_clause": "X."
              },
              "validation_hints": [
                "MaxLength=variable"
              ],
              "is_key_field": true,
              "is_required": false
            },
            {
              "level": "05",
              "name": "VALID-DAILY-LIMIT",
              "pic": "S9(11)V99",
              "line_number": 11,
              "cobol_type": "numeric_decimal",
              "dotnet_property": {
                "name": "ValidDailyLimit",
                "type": "decimal",
                "original_name": "VALID-DAILY-LIMIT",
                "pic_clause": "S9(11)V99"
              },
              "java_property": {
                "name": "validDailyLimit",
                "type": "BigDecimal",
                "original_name": "VALID-DAILY-LIMIT",
                "pic_clause": "S9(11)V99"
              },
              "validation_hints": [
                "Numeric"
              ],
              "is_key_field": true,
              "is_required": true
            },
            {
              "level": "05",
              "name": "VALID-MIN-BALANCE",
              "pic": "S9(11)V99",
              "line_number": 13,
              "cobol_type": "numeric_decimal",
              "dotnet_property": {
                "name": "ValidMinBalance",
                "type": "decimal",
                "original_name": "VALID-MIN-BALANCE",
                "pic_clause": "S9(11)V99"
              },
              "java_property": {
                "name": "validMinBalance",
                "type": "BigDecimal",
                "original_name": "VALID-MIN-BALANCE",
                "pic_clause": "S9(11)V99"
              },
              "validation_hints": [
                "Numeric"
              ],
              "is_key_field": true,
              "is_required": true
            },
            {
              "level": "05",
              "name": "VALID-OVERDRAFT",
              "pic": "S9(11)V99",
              "line_number": 15,
              "cobol_type": "numeric_decimal",
              "dotnet_property": {
                "name": "ValidOverdraft",
                "type": "decimal",
                "original_name": "VALID-OVERDRAFT",
                "pic_clause": "S9(11)V99"
              },
              "java_property": {
                "name": "validOverdraft",
                "type": "BigDecimal",
                "original_name": "VALID-OVERDRAFT",
                "pic_clause": "S9(11)V99"
              },
              "validation_hints": [
                "Numeric"
              ],
              "is_key_field": true,
              "is_required": true
            }
          ],
          "total_fields": 6,
          "complexity_score": 6,
          "suggested_dotnet_class": "AccountValidation",
          "entity_type": "Entity",
          "has_key_fields": true
        }
      },
      "control_includes": {},
      "jcl_files": {
        "BANKING.JCL": {
          "description": "JCL job control file",
          "jobs": [
            "BANKJOB"
          ],
          "steps": [
            {
              "name": "COMPILE",
              "line": 19,
              "dotnet_equivalent": "Background Service or Azure Function"
            },
            {
              "name": "LINK",
              "line": 39,
              "dotnet_equivalent": "Background Service or Azure Function"
            },
            {
              "name": "CICSDEF",
              "line": 77,
              "dotnet_equivalent": "Background Service or Azure Function"
            },
            {
              "name": "VSAM",
              "line": 171,
              "dotnet_equivalent": "Background Service or Azure Function"
            }
          ],
          "datasets": [
            "SYS1.PROCLIB",
            "BANK.COPYBOOK.LIBRARY",
            "CICS.COPYBOOK.LIBRARY",
            "DB2.COPYBOOK.LIBRARY",
            "BANK.SOURCE.LIBRARY",
            "CICS.SDFHLOAD",
            "DB2.SDSNLOAD",
            "BANK.LOAD.LIBRARY",
            "BANK.LOAD.LIBRARY",
            "CICS.SDFHLOAD",
            "CICS.DFHCSD"
          ],
          "programs": [
            "IEWL",
            "DFHCSDUP",
            "IDCAMS"
          ],
          "dotnet_equivalent": "Azure Functions, Background Services, or Docker containers",
          "complexity_score": 7
        }
      },
      "bms_maps": {},
      "summary": {
        "total_programs": 5,
        "total_copybooks": 1,
        "total_control_includes": 0,
        "total_jcl_files": 1,
        "total_bms_maps": 0
      },
      "project_metadata": {
        "analysis_timestamp": "2025-07-11T16:24:01.154934",
        "total_files": 7,
        "business_domain": "BANKING",
        "cics_transaction_flow": [],
        "data_flow_analysis": {},
        "integration_points": []
      },
      "cross_references": {
        "program_to_copybook": {
          "BANKING.CBL": [
            "ACCOUNT-VALIDATION.cpy",
            "ERROR-CODES.cpy",
            "SECURITY-CONTROL.cpy",
            "TRANSACTION-TYPES.cpy"
          ],
          "batch.cbl": [],
          "cics.cbl": [],
          "cobol_code.cbl": [],
          "factorial.cbl": []
        },
        "program_to_program": {},
        "data_dependencies": []
      },
      "transaction_flows": [
        {
          "program": "BANKING.CBL",
          "entry_point": "BANKING",
          "cics_operations": 16,
          "data_operations": 2,
          "complexity": 20
        },
        {
          "program": "batch.cbl",
          "entry_point": "BATCHPROC",
          "cics_operations": 0,
          "data_operations": 0,
          "complexity": 0
        },
        {
          "program": "cics.cbl",
          "entry_point": "CICSCUST",
          "cics_operations": 4,
          "data_operations": 0,
          "complexity": 4
        },
        {
          "program": "cobol_code.cbl",
          "entry_point": "DBCONNECT",
          "cics_operations": 0,
          "data_operations": 23,
          "complexity": 46
        },
        {
          "program": "factorial.cbl",
          "entry_point": "ADD-TWO-NUMBERS",
          "cics_operations": 0,
          "data_operations": 0,
          "complexity": 0
        }
      ],
      "ai_insights": {
        "business_domain": "BANKING",
        "integration_patterns": [
          "Synchronous request/reply",
          "Asynchronous messaging",
          "Service-oriented architecture"
        ],
        "data_flows": [
          {
            "source": "CICS programs",
            "destination": "Database",
            "type": "SQL operations",
            "count": 25
          },
          {
            "source": "CICS programs",
            "destination": "External systems",
            "type": "CICS commands",
            "count": 20
          }
        ],
        "modernization_recommendations": [
          "Refactor COBOL programs to use modern languages like Java or .NET",
          "Implement APIs for external system integration",
          "Adopt microservices architecture for better scalability and maintainability",
          "Use cloud-based solutions for batch processing"
        ],
        "risk_assessment": {
          "legacy_code_dependency": "High",
          "integration_complexity": "Medium",
          "data_security": "High",
          "modernization_cost": "Medium"
        }
      },
      "enhancement_timestamp": "2025-07-11T16:24:49.811777"
    },
    "conversion_context": {
      "business_entities": [
        {
          "cobol_name": "WS-EMPLOYEE-RECORD",
          "dotnet_class": "WsEmployeeRecord",
          "namespace": "BankingApp.Domain.Entities",
          "source_file": "cobol_code.cbl",
          "complexity": "medium"
        },
        {
          "cobol_name": "WS-DB-CONNECTION",
          "dotnet_class": "WsDbConnection",
          "namespace": "BankingApp.Domain.Entities",
          "source_file": "cobol_code.cbl",
          "complexity": "medium"
        },
        {
          "cobol_name": "WS-FLAGS",
          "dotnet_class": "WsFlags",
          "namespace": "BankingApp.Domain.Entities",
          "source_file": "cobol_code.cbl",
          "complexity": "medium"
        },
        {
          "cobol_name": "WS-COUNTERS",
          "dotnet_class": "WsCounters",
          "namespace": "BankingApp.Domain.Entities",
          "source_file": "cobol_code.cbl",
          "complexity": "medium"
        },
        {
          "cobol_name": "WS-ERROR-HANDLING",
          "dotnet_class": "WsErrorHandling",
          "namespace": "BankingApp.Domain.Entities",
          "source_file": "cobol_code.cbl",
          "complexity": "medium"
        },
        {
          "cobol_name": "WS-SEARCH-CRITERIA",
          "dotnet_class": "WsSearchCriteria",
          "namespace": "BankingApp.Domain.Entities",
          "source_file": "cobol_code.cbl",
          "complexity": "medium"
        },
        {
          "cobol_name": "WS-USER-INPUT",
          "dotnet_class": "WsUserInput",
          "namespace": "BankingApp.Domain.Entities",
          "source_file": "cobol_code.cbl",
          "complexity": "medium"
        },
        {
          "cobol_name": "WS-DISPLAY-VARIABLES",
          "dotnet_class": "WsDisplayVariables",
          "namespace": "BankingApp.Domain.Entities",
          "source_file": "cobol_code.cbl",
          "complexity": "medium"
        },
        {
          "cobol_name": "HV-EMP-ID",
          "dotnet_class": "HvEmpId",
          "namespace": "BankingApp.Domain.Entities",
          "source_file": "cobol_code.cbl",
          "complexity": "medium"
        },
        {
          "cobol_name": "HV-EMP-FIRST-NAME",
          "dotnet_class": "HvEmpFirstName",
          "namespace": "BankingApp.Domain.Entities",
          "source_file": "cobol_code.cbl",
          "complexity": "medium"
        },
        {
          "cobol_name": "HV-EMP-LAST-NAME",
          "dotnet_class": "HvEmpLastName",
          "namespace": "BankingApp.Domain.Entities",
          "source_file": "cobol_code.cbl",
          "complexity": "medium"
        },
        {
          "cobol_name": "HV-EMP-DEPT",
          "dotnet_class": "HvEmpDept",
          "namespace": "BankingApp.Domain.Entities",
          "source_file": "cobol_code.cbl",
          "complexity": "medium"
        },
        {
          "cobol_name": "HV-EMP-POSITION",
          "dotnet_class": "HvEmpPosition",
          "namespace": "BankingApp.Domain.Entities",
          "source_file": "cobol_code.cbl",
          "complexity": "medium"
        },
        {
          "cobol_name": "HV-EMP-SALARY",
          "dotnet_class": "HvEmpSalary",
          "namespace": "BankingApp.Domain.Entities",
          "source_file": "cobol_code.cbl",
          "complexity": "medium"
        },
        {
          "cobol_name": "HV-EMP-HIRE-DATE",
          "dotnet_class": "HvEmpHireDate",
          "namespace": "BankingApp.Domain.Entities",
          "source_file": "cobol_code.cbl",
          "complexity": "medium"
        },
        {
          "cobol_name": "HV-DB-USER",
          "dotnet_class": "HvDbUser",
          "namespace": "BankingApp.Domain.Entities",
          "source_file": "cobol_code.cbl",
          "complexity": "medium"
        },
        {
          "cobol_name": "HV-DB-PASSWORD",
          "dotnet_class": "HvDbPassword",
          "namespace": "BankingApp.Domain.Entities",
          "source_file": "cobol_code.cbl",
          "complexity": "medium"
        },
        {
          "cobol_name": "HV-SEARCH-DEPT",
          "dotnet_class": "HvSearchDept",
          "namespace": "BankingApp.Domain.Entities",
          "source_file": "cobol_code.cbl",
          "complexity": "medium"
        },
        {
          "cobol_name": "HV-MIN-SALARY",
          "dotnet_class": "HvMinSalary",
          "namespace": "BankingApp.Domain.Entities",
          "source_file": "cobol_code.cbl",
          "complexity": "medium"
        }
      ],
      "conversion_patterns": [
        {
          "pattern_type": "data_structure",
          "cobol_pattern": "01 WS-EMPLOYEE-RECORD",
          "dotnet_equivalent": "public class WsEmployeeRecord",
          "context": "Convert COBOL record WS-EMPLOYEE-RECORD to Java class",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "data_structure",
          "cobol_pattern": "01 WS-DB-CONNECTION",
          "dotnet_equivalent": "public class WsDbConnection",
          "context": "Convert COBOL record WS-DB-CONNECTION to Java class",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "data_structure",
          "cobol_pattern": "01 WS-FLAGS",
          "dotnet_equivalent": "public class WsFlags",
          "context": "Convert COBOL record WS-FLAGS to Java class",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "data_structure",
          "cobol_pattern": "01 WS-COUNTERS",
          "dotnet_equivalent": "public class WsCounters",
          "context": "Convert COBOL record WS-COUNTERS to Java class",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "data_structure",
          "cobol_pattern": "01 WS-ERROR-HANDLING",
          "dotnet_equivalent": "public class WsErrorHandling",
          "context": "Convert COBOL record WS-ERROR-HANDLING to Java class",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "data_structure",
          "cobol_pattern": "01 WS-SEARCH-CRITERIA",
          "dotnet_equivalent": "public class WsSearchCriteria",
          "context": "Convert COBOL record WS-SEARCH-CRITERIA to Java class",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "data_structure",
          "cobol_pattern": "01 WS-USER-INPUT",
          "dotnet_equivalent": "public class WsUserInput",
          "context": "Convert COBOL record WS-USER-INPUT to Java class",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "data_structure",
          "cobol_pattern": "01 WS-DISPLAY-VARIABLES",
          "dotnet_equivalent": "public class WsDisplayVariables",
          "context": "Convert COBOL record WS-DISPLAY-VARIABLES to Java class",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "data_structure",
          "cobol_pattern": "01 HV-EMP-ID",
          "dotnet_equivalent": "public class HvEmpId",
          "context": "Convert COBOL record HV-EMP-ID to Java class",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "data_structure",
          "cobol_pattern": "01 HV-EMP-FIRST-NAME",
          "dotnet_equivalent": "public class HvEmpFirstName",
          "context": "Convert COBOL record HV-EMP-FIRST-NAME to Java class",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "data_structure",
          "cobol_pattern": "01 HV-EMP-LAST-NAME",
          "dotnet_equivalent": "public class HvEmpLastName",
          "context": "Convert COBOL record HV-EMP-LAST-NAME to Java class",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "data_structure",
          "cobol_pattern": "01 HV-EMP-DEPT",
          "dotnet_equivalent": "public class HvEmpDept",
          "context": "Convert COBOL record HV-EMP-DEPT to Java class",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "data_structure",
          "cobol_pattern": "01 HV-EMP-POSITION",
          "dotnet_equivalent": "public class HvEmpPosition",
          "context": "Convert COBOL record HV-EMP-POSITION to Java class",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "data_structure",
          "cobol_pattern": "01 HV-EMP-SALARY",
          "dotnet_equivalent": "public class HvEmpSalary",
          "context": "Convert COBOL record HV-EMP-SALARY to Java class",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "data_structure",
          "cobol_pattern": "01 HV-EMP-HIRE-DATE",
          "dotnet_equivalent": "public class HvEmpHireDate",
          "context": "Convert COBOL record HV-EMP-HIRE-DATE to Java class",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "data_structure",
          "cobol_pattern": "01 HV-DB-USER",
          "dotnet_equivalent": "public class HvDbUser",
          "context": "Convert COBOL record HV-DB-USER to Java class",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "data_structure",
          "cobol_pattern": "01 HV-DB-PASSWORD",
          "dotnet_equivalent": "public class HvDbPassword",
          "context": "Convert COBOL record HV-DB-PASSWORD to Java class",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "data_structure",
          "cobol_pattern": "01 HV-SEARCH-DEPT",
          "dotnet_equivalent": "public class HvSearchDept",
          "context": "Convert COBOL record HV-SEARCH-DEPT to Java class",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "data_structure",
          "cobol_pattern": "01 HV-MIN-SALARY",
          "dotnet_equivalent": "public class HvMinSalary",
          "context": "Convert COBOL record HV-MIN-SALARY to Java class",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "file_operation",
          "cobol_pattern": "FD EMP",
          "dotnet_equivalent": "// Repository pattern with Entity Framework Core with Entity Framework for EMP",
          "context": "Convert file operations to repository pattern",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "file_operation",
          "cobol_pattern": "FD EMP",
          "dotnet_equivalent": "// Repository pattern with Entity Framework Core with Entity Framework for EMP",
          "context": "Convert file operations to repository pattern",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "file_operation",
          "cobol_pattern": "FD FIRST",
          "dotnet_equivalent": "// Repository pattern with Entity Framework Core with Entity Framework for FIRST",
          "context": "Convert file operations to repository pattern",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "file_operation",
          "cobol_pattern": "FD FIRST",
          "dotnet_equivalent": "// Repository pattern with Entity Framework Core with Entity Framework for FIRST",
          "context": "Convert file operations to repository pattern",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "PERFORM 1000-INITIALIZE.",
          "dotnet_equivalent": "// PERFORM converted to Java",
          "context": "Convert PERFORM statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "IF DB-CONNECTED",
          "dotnet_equivalent": "// IF converted to Java",
          "context": "Convert IF statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "PERFORM 2000-PROCESS-USER-CHOICE",
          "dotnet_equivalent": "// PERFORM converted to Java",
          "context": "Convert PERFORM statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "PERFORM 9000-TERMINATE.",
          "dotnet_equivalent": "// PERFORM converted to Java",
          "context": "Convert PERFORM statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "PERFORM 1100-CONNECT-TO-DB.",
          "dotnet_equivalent": "// PERFORM converted to Java",
          "context": "Convert PERFORM statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "PERFORM 8000-CHECK-SQL-STATUS.",
          "dotnet_equivalent": "// PERFORM converted to Java",
          "context": "Convert PERFORM statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "IF SQLCODE = 0",
          "dotnet_equivalent": "// IF converted to Java",
          "context": "Convert IF statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "PERFORM 2100-DISPLAY-MENU.",
          "dotnet_equivalent": "// PERFORM converted to Java",
          "context": "Convert PERFORM statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "PERFORM 3000-RETRIEVE-ALL-EMPLOYEES",
          "dotnet_equivalent": "// PERFORM converted to Java",
          "context": "Convert PERFORM statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "PERFORM 3100-RETRIEVE-BY-CRITERIA",
          "dotnet_equivalent": "// PERFORM converted to Java",
          "context": "Convert PERFORM statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "PERFORM 4000-INSERT-EMPLOYEE",
          "dotnet_equivalent": "// PERFORM converted to Java",
          "context": "Convert PERFORM statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "PERFORM 5000-UPDATE-EMPLOYEE",
          "dotnet_equivalent": "// PERFORM converted to Java",
          "context": "Convert PERFORM statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "PERFORM 6000-DELETE-EMPLOYEE",
          "dotnet_equivalent": "// PERFORM converted to Java",
          "context": "Convert PERFORM statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "IF WS-CONTINUE-CHOICE NOT = \"N\" AND WS-OPERATION-CHOICE NOT = 9",
          "dotnet_equivalent": "// IF converted to Java",
          "context": "Convert IF statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "PERFORM 8000-CHECK-SQL-STATUS.",
          "dotnet_equivalent": "// PERFORM converted to Java",
          "context": "Convert PERFORM statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "IF SQLCODE = 0",
          "dotnet_equivalent": "// IF converted to Java",
          "context": "Convert IF statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "PERFORM 3050-FETCH-EMPLOYEE-RECORD",
          "dotnet_equivalent": "// PERFORM converted to Java",
          "context": "Convert PERFORM statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "IF SQLCODE = 0",
          "dotnet_equivalent": "// IF converted to Java",
          "context": "Convert IF statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "IF SQLCODE = 100",
          "dotnet_equivalent": "// IF converted to Java",
          "context": "Convert IF statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "PERFORM 8000-CHECK-SQL-STATUS",
          "dotnet_equivalent": "// PERFORM converted to Java",
          "context": "Convert PERFORM statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "PERFORM 8000-CHECK-SQL-STATUS.",
          "dotnet_equivalent": "// PERFORM converted to Java",
          "context": "Convert PERFORM statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "IF SQLCODE = 0",
          "dotnet_equivalent": "// IF converted to Java",
          "context": "Convert IF statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "PERFORM 3150-FETCH-DEPT-RECORD",
          "dotnet_equivalent": "// PERFORM converted to Java",
          "context": "Convert PERFORM statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "IF SQLCODE = 0",
          "dotnet_equivalent": "// IF converted to Java",
          "context": "Convert IF statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "IF SQLCODE = 100",
          "dotnet_equivalent": "// IF converted to Java",
          "context": "Convert IF statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "PERFORM 8000-CHECK-SQL-STATUS",
          "dotnet_equivalent": "// PERFORM converted to Java",
          "context": "Convert PERFORM statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "PERFORM 8000-CHECK-SQL-STATUS.",
          "dotnet_equivalent": "// PERFORM converted to Java",
          "context": "Convert PERFORM statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "IF SQLCODE = 0",
          "dotnet_equivalent": "// IF converted to Java",
          "context": "Convert IF statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "PERFORM 8000-CHECK-SQL-STATUS.",
          "dotnet_equivalent": "// PERFORM converted to Java",
          "context": "Convert PERFORM statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "IF SQLCODE = 0",
          "dotnet_equivalent": "// IF converted to Java",
          "context": "Convert IF statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "IF WS-EMP-DEPT = SPACES",
          "dotnet_equivalent": "// IF converted to Java",
          "context": "Convert IF statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "IF WS-EMP-POSITION = SPACES",
          "dotnet_equivalent": "// IF converted to Java",
          "context": "Convert IF statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "IF WS-EMP-SALARY = ZEROES",
          "dotnet_equivalent": "// IF converted to Java",
          "context": "Convert IF statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "PERFORM 8000-CHECK-SQL-STATUS",
          "dotnet_equivalent": "// PERFORM converted to Java",
          "context": "Convert PERFORM statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "IF SQLCODE = 0",
          "dotnet_equivalent": "// IF converted to Java",
          "context": "Convert IF statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "IF SQLCODE = 100",
          "dotnet_equivalent": "// IF converted to Java",
          "context": "Convert IF statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "PERFORM 8000-CHECK-SQL-STATUS",
          "dotnet_equivalent": "// PERFORM converted to Java",
          "context": "Convert PERFORM statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "PERFORM 8000-CHECK-SQL-STATUS.",
          "dotnet_equivalent": "// PERFORM converted to Java",
          "context": "Convert PERFORM statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "IF SQLCODE = 0",
          "dotnet_equivalent": "// IF converted to Java",
          "context": "Convert IF statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "IF WS-CONTINUE-CHOICE = \"Y\" OR WS-CONTINUE-CHOICE = \"y\"",
          "dotnet_equivalent": "// IF converted to Java",
          "context": "Convert IF statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "PERFORM 8000-CHECK-SQL-STATUS",
          "dotnet_equivalent": "// PERFORM converted to Java",
          "context": "Convert PERFORM statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "IF SQLCODE = 0",
          "dotnet_equivalent": "// IF converted to Java",
          "context": "Convert IF statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "IF SQLCODE = 100",
          "dotnet_equivalent": "// IF converted to Java",
          "context": "Convert IF statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "PERFORM 8000-CHECK-SQL-STATUS",
          "dotnet_equivalent": "// PERFORM converted to Java",
          "context": "Convert PERFORM statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "IF SQLCODE < 0",
          "dotnet_equivalent": "// IF converted to Java",
          "context": "Convert IF statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "IF DB-CONNECTED",
          "dotnet_equivalent": "// IF converted to Java",
          "context": "Convert IF statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "PERFORM 8000-CHECK-SQL-STATUS",
          "dotnet_equivalent": "// PERFORM converted to Java",
          "context": "Convert PERFORM statement to Java",
          "source_file": "cobol_code.cbl"
        },
        {
          "pattern_type": "business_logic",
          "cobol_pattern": "IF SQLCODE = 0",
          "dotnet_equivalent": "// IF converted to Java",
          "context": "Convert IF statement to Java",
          "source_file": "cobol_code.cbl"
        }
      ],
      "dependencies": {},
      "cics_patterns": [
        {
          "command_type": "RETURN",
          "dotnet_service": "ITransactionService",
          "microservice_pattern": "Generic Business Service",
          "program": "BANKING.CBL"
        },
        {
          "command_type": "LINK",
          "dotnet_service": "IMediator",
          "microservice_pattern": "Service Orchestrator",
          "program": "BANKING.CBL"
        },
        {
          "command_type": "LINK",
          "dotnet_service": "IMediator",
          "microservice_pattern": "Service Orchestrator",
          "program": "BANKING.CBL"
        },
        {
          "command_type": "",
          "dotnet_service": "",
          "microservice_pattern": "Generic Business Service",
          "program": "BANKING.CBL"
        },
        {
          "command_type": "",
          "dotnet_service": "",
          "microservice_pattern": "Generic Business Service",
          "program": "BANKING.CBL"
        },
        {
          "command_type": "",
          "dotnet_service": "",
          "microservice_pattern": "Generic Business Service",
          "program": "BANKING.CBL"
        },
        {
          "command_type": "READ",
          "dotnet_service": "IRepositoryService",
          "microservice_pattern": "Data Access Service",
          "program": "BANKING.CBL"
        },
        {
          "command_type": "WRITE",
          "dotnet_service": "IRepositoryService",
          "microservice_pattern": "Data Persistence Service",
          "program": "BANKING.CBL"
        },
        {
          "command_type": "READ",
          "dotnet_service": "IRepositoryService",
          "microservice_pattern": "Data Access Service",
          "program": "BANKING.CBL"
        },
        {
          "command_type": "WRITE",
          "dotnet_service": "IRepositoryService",
          "microservice_pattern": "Data Persistence Service",
          "program": "BANKING.CBL"
        },
        {
          "command_type": "WRITE",
          "dotnet_service": "IRepositoryService",
          "microservice_pattern": "Data Persistence Service",
          "program": "BANKING.CBL"
        },
        {
          "command_type": "",
          "dotnet_service": "",
          "microservice_pattern": "Generic Business Service",
          "program": "BANKING.CBL"
        },
        {
          "command_type": "",
          "dotnet_service": "",
          "microservice_pattern": "Generic Business Service",
          "program": "BANKING.CBL"
        },
        {
          "command_type": "",
          "dotnet_service": "",
          "microservice_pattern": "Generic Business Service",
          "program": "BANKING.CBL"
        },
        {
          "command_type": "LINK",
          "dotnet_service": "IMediator",
          "microservice_pattern": "Service Orchestrator",
          "program": "BANKING.CBL"
        },
        {
          "command_type": "WRITEQ_TS",
          "dotnet_service": "ICacheService",
          "microservice_pattern": "Caching Service",
          "program": "BANKING.CBL"
        },
        {
          "command_type": "RECEIVE",
          "dotnet_service": "IRequestService",
          "microservice_pattern": "Request Handler Service",
          "program": "cics.cbl"
        },
        {
          "command_type": "READ",
          "dotnet_service": "IRepositoryService",
          "microservice_pattern": "Data Access Service",
          "program": "cics.cbl"
        },
        {
          "command_type": "SEND",
          "dotnet_service": "IResponseService",
          "microservice_pattern": "Response Service",
          "program": "cics.cbl"
        },
        {
          "command_type": "RETURN",
          "dotnet_service": "ITransactionService",
          "microservice_pattern": "Generic Business Service",
          "program": "cics.cbl"
        }
      ],
      "architecture_recommendations": [
        "Implement Clean Architecture with Domain-Driven Design",
        "Use Entity Framework Core for data persistence",
        "Implement CQRS pattern for read/write separation",
        "Use MediatR for decoupled command/query handling",
        "Implement event sourcing for audit trails",
        "Use decimal type for all financial calculations",
        "Implement strict validation for financial transactions"
      ],
      "project_namespace": "BankingApp",
      "technology_stack": {
        "database_usage": true,
        "messaging_patterns": [],
        "caching_patterns": [
          "Redis",
          "In-Memory Caching"
        ],
        "security_patterns": [
          "JWT Authentication",
          "Role-based Authorization"
        ],
        "recommended_packages": [
          "Microsoft.EntityFrameworkCore",
          "Microsoft.AspNetCore.Authentication.JwtBearer",
          "Swashbuckle.AspNetCore",
          "Serilog.AspNetCore",
          "StackExchange.Redis"
        ]
      }
    }
  },
  "conversion_context": {
    "business_entities": [
      {
        "cobol_name": "WS-EMPLOYEE-RECORD",
        "dotnet_class": "WsEmployeeRecord",
        "namespace": "BankingApp.Domain.Entities",
        "source_file": "cobol_code.cbl",
        "complexity": "medium"
      },
      {
        "cobol_name": "WS-DB-CONNECTION",
        "dotnet_class": "WsDbConnection",
        "namespace": "BankingApp.Domain.Entities",
        "source_file": "cobol_code.cbl",
        "complexity": "medium"
      },
      {
        "cobol_name": "WS-FLAGS",
        "dotnet_class": "WsFlags",
        "namespace": "BankingApp.Domain.Entities",
        "source_file": "cobol_code.cbl",
        "complexity": "medium"
      },
      {
        "cobol_name": "WS-COUNTERS",
        "dotnet_class": "WsCounters",
        "namespace": "BankingApp.Domain.Entities",
        "source_file": "cobol_code.cbl",
        "complexity": "medium"
      },
      {
        "cobol_name": "WS-ERROR-HANDLING",
        "dotnet_class": "WsErrorHandling",
        "namespace": "BankingApp.Domain.Entities",
        "source_file": "cobol_code.cbl",
        "complexity": "medium"
      },
      {
        "cobol_name": "WS-SEARCH-CRITERIA",
        "dotnet_class": "WsSearchCriteria",
        "namespace": "BankingApp.Domain.Entities",
        "source_file": "cobol_code.cbl",
        "complexity": "medium"
      },
      {
        "cobol_name": "WS-USER-INPUT",
        "dotnet_class": "WsUserInput",
        "namespace": "BankingApp.Domain.Entities",
        "source_file": "cobol_code.cbl",
        "complexity": "medium"
      },
      {
        "cobol_name": "WS-DISPLAY-VARIABLES",
        "dotnet_class": "WsDisplayVariables",
        "namespace": "BankingApp.Domain.Entities",
        "source_file": "cobol_code.cbl",
        "complexity": "medium"
      },
      {
        "cobol_name": "HV-EMP-ID",
        "dotnet_class": "HvEmpId",
        "namespace": "BankingApp.Domain.Entities",
        "source_file": "cobol_code.cbl",
        "complexity": "medium"
      },
      {
        "cobol_name": "HV-EMP-FIRST-NAME",
        "dotnet_class": "HvEmpFirstName",
        "namespace": "BankingApp.Domain.Entities",
        "source_file": "cobol_code.cbl",
        "complexity": "medium"
      },
      {
        "cobol_name": "HV-EMP-LAST-NAME",
        "dotnet_class": "HvEmpLastName",
        "namespace": "BankingApp.Domain.Entities",
        "source_file": "cobol_code.cbl",
        "complexity": "medium"
      },
      {
        "cobol_name": "HV-EMP-DEPT",
        "dotnet_class": "HvEmpDept",
        "namespace": "BankingApp.Domain.Entities",
        "source_file": "cobol_code.cbl",
        "complexity": "medium"
      },
      {
        "cobol_name": "HV-EMP-POSITION",
        "dotnet_class": "HvEmpPosition",
        "namespace": "BankingApp.Domain.Entities",
        "source_file": "cobol_code.cbl",
        "complexity": "medium"
      },
      {
        "cobol_name": "HV-EMP-SALARY",
        "dotnet_class": "HvEmpSalary",
        "namespace": "BankingApp.Domain.Entities",
        "source_file": "cobol_code.cbl",
        "complexity": "medium"
      },
      {
        "cobol_name": "HV-EMP-HIRE-DATE",
        "dotnet_class": "HvEmpHireDate",
        "namespace": "BankingApp.Domain.Entities",
        "source_file": "cobol_code.cbl",
        "complexity": "medium"
      },
      {
        "cobol_name": "HV-DB-USER",
        "dotnet_class": "HvDbUser",
        "namespace": "BankingApp.Domain.Entities",
        "source_file": "cobol_code.cbl",
        "complexity": "medium"
      },
      {
        "cobol_name": "HV-DB-PASSWORD",
        "dotnet_class": "HvDbPassword",
        "namespace": "BankingApp.Domain.Entities",
        "source_file": "cobol_code.cbl",
        "complexity": "medium"
      },
      {
        "cobol_name": "HV-SEARCH-DEPT",
        "dotnet_class": "HvSearchDept",
        "namespace": "BankingApp.Domain.Entities",
        "source_file": "cobol_code.cbl",
        "complexity": "medium"
      },
      {
        "cobol_name": "HV-MIN-SALARY",
        "dotnet_class": "HvMinSalary",
        "namespace": "BankingApp.Domain.Entities",
        "source_file": "cobol_code.cbl",
        "complexity": "medium"
      }
    ],
    "conversion_patterns": [
      {
        "pattern_type": "data_structure",
        "cobol_pattern": "01 WS-EMPLOYEE-RECORD",
        "dotnet_equivalent": "public class WsEmployeeRecord",
        "context": "Convert COBOL record WS-EMPLOYEE-RECORD to Java class",
        "source_file": "cobol_code.cbl"
      },
      {
        "pattern_type": "data_structure",
        "cobol_pattern": "01 WS-DB-CONNECTION",
        "dotnet_equivalent": "public class WsDbConnection",
        "context": "Convert COBOL record WS-DB-CONNECTION to Java class",
        "source_file": "cobol_code.cbl"
      },
      {
        "pattern_type": "data_structure",
        "cobol_pattern": "01 WS-FLAGS",
        "dotnet_equivalent": "public class WsFlags",
        "context": "Convert COBOL record WS-FLAGS to Java class",
        "source_file": "cobol_code.cbl"
      },
      {
        "pattern_type": "data_structure",
        "cobol_pattern": "01 WS-COUNTERS",
        "dotnet_equivalent": "public class WsCounters",
        "context": "Convert COBOL record WS-COUNTERS to Java class",
        "source_file": "cobol_code.cbl"
      },
      {
        "pattern_type": "data_structure",
        "cobol_pattern": "01 WS-ERROR-HANDLING",
        "dotnet_equivalent": "public class WsErrorHandling",
        "context": "Convert COBOL record WS-ERROR-HANDLING to Java class",
        "source_file": "cobol_code.cbl"
      },
      {
        "pattern_type": "data_structure",
        "cobol_pattern": "01 WS-SEARCH-CRITERIA",
        "dotnet_equivalent": "public class WsSearchCriteria",
        "context": "Convert COBOL record WS-SEARCH-CRITERIA to Java class",
        "source_file": "cobol_code.cbl"
      },
      {
        "pattern_type": "data_structure",
        "cobol_pattern": "01 WS-USER-INPUT",
        "dotnet_equivalent": "public class WsUserInput",
        "context": "Convert COBOL record WS-USER-INPUT to Java class",
        "source_file": "cobol_code.cbl"
      },
      {
        "pattern_type": "data_structure",
        "cobol_pattern": "01 WS-DISPLAY-VARIABLES",
        "dotnet_equivalent": "public class WsDisplayVariables",
        "context": "Convert COBOL record WS-DISPLAY-VARIABLES to Java class",
        "source_file": "cobol_code.cbl"
      },
      {
        "pattern_type": "data_structure",
        "cobol_pattern": "01 HV-EMP-ID",
        "dotnet_equivalent": "public class HvEmpId",
        "context": "Convert COBOL record HV-EMP-ID to Java class",
        "source_file": "cobol_code.cbl"
      },
      {
        "pattern_type": "data_structure",
        "cobol_pattern": "01 HV-EMP-FIRST-NAME",
        "dotnet_equivalent": "public class HvEmpFirstName",
        "context": "Convert COBOL record HV-EMP-FIRST-NAME to Java class",
        "source_file": "cobol_code.cbl"
      },
      {
        "pattern_type": "data_structure",
        "cobol_pattern": "01 HV-EMP-LAST-NAME",
        "dotnet_equivalent": "public class HvEmpLastName",
        "context": "Convert COBOL record HV-EMP-LAST-NAME to Java class",
        "source_file": "cobol_code.cbl"
      },
      {
        "pattern_type": "data_structure",
        "cobol_pattern": "01 HV-EMP-DEPT",
        "dotnet_equivalent": "public class HvEmpDept",
        "context": "Convert COBOL record HV-EMP-DEPT to Java class",
        "source_file": "cobol_code.cbl"
      },
      {
        "pattern_type": "data_structure",
        "cobol_pattern": "01 HV-EMP-POSITION",
        "dotnet_equivalent": "public class HvEmpPosition",
        "context": "Convert COBOL record HV-EMP-POSITION to Java class",
        "source_file": "cobol_code.cbl"
      },
      {
        "pattern_type": "data_structure",
        "cobol_pattern": "01 HV-EMP-SALARY",
        "dotnet_equivalent": "public class HvEmpSalary",
        "context": "Convert COBOL record HV-EMP-SALARY to Java class",
        "source_file": "cobol_code.cbl"
      },
      {
        "pattern_type": "data_structure",
        "cobol_pattern": "01 HV-EMP-HIRE-DATE",
        "dotnet_equivalent": "public class HvEmpHireDate",
        "context": "Convert COBOL record HV-EMP-HIRE-DATE to Java class",
        "source_file": "cobol_code.cbl"
      },
      {
        "pattern_type": "data_structure",
        "cobol_pattern": "01 HV-DB-USER",
        "dotnet_equivalent": "public class HvDbUser",
        "context": "Convert COBOL record HV-DB-USER to Java class",
        "source_file": "cobol_code.cbl"
      },
      {
        "pattern_type": "data_structure",
        "cobol_pattern": "01 HV-DB-PASSWORD",
        "dotnet_equivalent": "public class HvDbPassword",
        "context": "Convert COBOL record HV-DB-PASSWORD to Java class",
        "source_file": "cobol_code.cbl"
      },
      {
        "pattern_type": "data_structure",
        "cobol_pattern": "01 HV-SEARCH-DEPT",
        "dotnet_equivalent": "public class HvSearchDept",
        "context": "Convert COBOL record HV-SEARCH-DEPT to Java class",
        "source_file": "cobol_code.cbl"
      },
      {
        "pattern_type": "data_structure",
        "cobol_pattern": "01 HV-MIN-SALARY",
        "dotnet_equivalent": "public class HvMinSalary",
        "context": "Convert COBOL record HV-MIN-SALARY to Java class",
        "source_file": "cobol_code.cbl"
      },
      {
        "pattern_type": "file_operation",
        "cobol_pattern": "FD EMP",
        "dotnet_equivalent": "// Repository pattern with Entity Framework Core with Entity Framework for EMP",
        "context": "Convert file operations to repository pattern",
        "source_file": "cobol_code.cbl"
      },
      {
        "pattern_type": "file_operation",
        "cobol_pattern": "FD EMP",
        "dotnet_equivalent": "// Repository pattern with Entity Framework Core with Entity Framework for EMP",
        "context": "Convert file operations to repository pattern",
        "source_file": "cobol_code.cbl"
      },
      {
        "pattern_type": "file_operation",
        "cobol_pattern": "FD FIRST",
        "dotnet_equivalent": "// Repository pattern with Entity Framework Core with Entity Framework for FIRST",
        "context": "Convert file operations to repository pattern",
        "source_file": "cobol_code.cbl"
      },
      {
        "pattern_type": "file_operation",
        "cobol_pattern": "FD FIRST",
        "dotnet_equivalent": "// Repository pattern with Entity Framework Core with Entity Framework for FIRST",
        "context": "Convert file operations to repository pattern",
        "source_file": "cobol_code.cbl"
      },
      {
        "pattern_type": "business_logic",
        "cobol_pattern": "PERFORM 1000-INITIALIZE.",
        "dotnet_equivalent": "// PERFORM converted to Java",
        "context": "Convert PERFORM statement to Java",
        "source_file": "cobol_code.cbl"
      },
      {
        "pattern_type": "business_logic",
        "cobol_pattern": "IF DB-CONNECTED",
        "dotnet_equivalent": "// IF converted to Java",
        "context": "Convert IF statement to Java",
        "source_file": "cobol_code.cbl"
      },
      {
        "pattern_type": "business_logic",
        "cobol_pattern": "PERFORM 2000-PROCESS-USER-CHOICE",
        "dotnet_equivalent": "// PERFORM converted to Java",
        "context": "Convert PERFORM statement to Java",
        "source_file": "cobol_code.cbl"
      },
      {
        "pattern_type": "business_logic",
        "cobol_pattern": "PERFORM 9000-TERMINATE.",
        "dotnet_equivalent": "// PERFORM converted to Java",
        "context": "Convert PERFORM statement to Java",
        "source_file": "cobol_code.cbl"
      },
      {
        "pattern_type": "business_logic",
        "cobol_pattern": "PERFORM 1100-CONNECT-TO-DB.",
        "dotnet_equivalent": "// PERFORM converted to Java",
        "context": "Convert PERFORM statement to Java",
        "source_file": "cobol_code.cbl"
      },
      {
        "pattern_type": "business_logic",
        "cobol_pattern": "PERFORM 8000-CHECK-SQL-STATUS.",
        "dotnet_equivalent": "// PERFORM converted to Java",
        "context": "Convert PERFORM statement to Java",
        "source_file": "cobol_code.cbl"
      },
      {
        "pattern_type": "business_logic",
        "cobol_pattern": "IF SQLCODE = 0",
        "dotnet_equivalent": "// IF converted to Java",
        "context": "Convert IF statement to Java",
        "source_file": "cobol_code.cbl"
      },
      {
        "pattern_type": "business_logic",
        "cobol_pattern": "PERFORM 2100-DISPLAY-MENU.",
        "dotnet_equivalent": "// PERFORM converted to Java",
        "context": "Convert PERFORM statement to Java",
        "source_file": "cobol_code.cbl"
      },
      {
        "pattern_type": "business_logic",
        "cobol_pattern": "PERFORM 3000-RETRIEVE-ALL-EMPLOYEES",
        "dotnet_equivalent": "// PERFORM converted to Java",
        "context": "Convert PERFORM statement to Java",
        "source_file": "cobol_code.cbl"
      },
      {
        "pattern_type": "business_logic",
        "cobol_pattern": "PERFORM 3100-RETRIEVE-BY-CRITERIA",
        "dotnet_equivalent": "// PERFORM converted to Java",
        "context": "Convert PERFORM statement to Java",
        "source_file": "cobol_code.cbl"
      },
      {
        "pattern_type": "business_logic",
        "cobol_pattern": "PERFORM 4000-INSERT-EMPLOYEE",
        "dotnet_equivalent": "// PERFORM converted to Java",
        "context": "Convert PERFORM statement to Java",
        "source_file": "cobol_code.cbl"
      },
      {
        "pattern_type": "business_logic",
        "cobol_pattern": "PERFORM 5000-UPDATE-EMPLOYEE",
        "dotnet_equivalent": "// PERFORM converted to Java",
        "context": "Convert PERFORM statement to Java",
        "source_file": "cobol_code.cbl"
      },
      {
        "pattern_type": "business_logic",
        "cobol_pattern": "PERFORM 6000-DELETE-EMPLOYEE",
        "dotnet_equivalent": "// PERFORM converted to Java",
        "context": "Convert PERFORM statement to Java",
        "source_file": "cobol_code.cbl"
      },
      {
        "pattern_type": "business_logic",
        "cobol_pattern": "IF WS-CONTINUE-CHOICE NOT = \"N\" AND WS-OPERATION-CHOICE NOT = 9",
        "dotnet_equivalent": "// IF converted to Java",
        "context": "Convert IF statement to Java",
        "source_file": "cobol_code.cbl"
      },
      {
        "pattern_type": "business_logic",
        "cobol_pattern": "PERFORM 8000-CHECK-SQL-STATUS.",
        "dotnet_equivalent": "// PERFORM converted to Java",
        "context": "Convert PERFORM statement to Java",
        "source_file": "cobol_code.cbl"
      },
      {
        "pattern_type": "business_logic",
        "cobol_pattern": "IF SQLCODE = 0",
        "dotnet_equivalent": "// IF converted to Java",
        "context": "Convert IF statement to Java",
        "source_file": "cobol_code.cbl"
      },
      {
        "pattern_type": "business_logic",
        "cobol_pattern": "PERFORM 3050-FETCH-EMPLOYEE-RECORD",
        "dotnet_equivalent": "// PERFORM converted to Java",
        "context": "Convert PERFORM statement to Java",
        "source_file": "cobol_code.cbl"
      },
      {
        "pattern_type": "business_logic",
        "cobol_pattern": "IF SQLCODE = 0",
        "dotnet_equivalent": "// IF converted to Java",
        "context": "Convert IF statement to Java",
        "source_file": "cobol_code.cbl"
      },
      {
        "pattern_type": "business_logic",
        "cobol_pattern": "IF SQLCODE = 100",
        "dotnet_equivalent": "// IF converted to Java",
        "context": "Convert IF statement to Java",
        "source_file": "cobol_code.cbl"
      },
      {
        "pattern_type": "business_logic",
        "cobol_pattern": "PERFORM 8000-CHECK-SQL-STATUS",
        "dotnet_equivalent": "// PERFORM converted to Java",
        "context": "Convert PERFORM statement to Java",
        "source_file": "cobol_code.cbl"
      },
      {
        "pattern_type": "business_logic",
        "cobol_pattern": "PERFORM 8000-CHECK-SQL-STATUS.",
        "dotnet_equivalent": "// PERFORM converted to Java",
        "context": "Convert PERFORM statement to Java",
        "source_file": "cobol_code.cbl"
      },
      {
        "pattern_type": "business_logic",
        "cobol_pattern": "IF SQLCODE = 0",
        "dotnet_equivalent": "// IF converted to Java",
        "context": "Convert IF statement to Java",
        "source_file": "cobol_code.cbl"
      },
      {
        "pattern_type": "business_logic",
        "cobol_pattern": "PERFORM 3150-FETCH-DEPT-RECORD",
        "dotnet_equivalent": "// PERFORM converted to Java",
        "context": "Convert PERFORM statement to Java",
        "source_file": "cobol_code.cbl"
      },
      {
        "pattern_type": "business_logic",
        "cobol_pattern": "IF SQLCODE = 0",
        "dotnet_equivalent": "// IF converted to Java",
        "context": "Convert IF statement to Java",
        "source_file": "cobol_code.cbl"
      },
      {
        "pattern_type": "business_logic",
        "cobol_pattern": "IF SQLCODE = 100",
        "dotnet_equivalent": "// IF converted to Java",
        "context": "Convert IF statement to Java",
        "source_file": "cobol_code.cbl"
      },
      {
        "pattern_type": "business_logic",
        "cobol_pattern": "PERFORM 8000-CHECK-SQL-STATUS",
        "dotnet_equivalent": "// PERFORM converted to Java",
        "context": "Convert PERFORM statement to Java",
        "source_file": "cobol_code.cbl"
      },
      {
        "pattern_type": "business_logic",
        "cobol_pattern": "PERFORM 8000-CHECK-SQL-STATUS.",
        "dotnet_equivalent": "// PERFORM converted to Java",
        "context": "Convert PERFORM statement to Java",
        "source_file": "cobol_code.cbl"
      },
      {
        "pattern_type": "business_logic",
        "cobol_pattern": "IF SQLCODE = 0",
        "dotnet_equivalent": "// IF converted to Java",
        "context": "Convert IF statement to Java",
        "source_file": "cobol_code.cbl"
      },
      {
        "pattern_type": "business_logic",
        "cobol_pattern": "PERFORM 8000-CHECK-SQL-STATUS.",
        "dotnet_equivalent": "// PERFORM converted to Java",
        "context": "Convert PERFORM statement to Java",
        "source_file": "cobol_code.cbl"
      },
      {
        "pattern_type": "business_logic",
        "cobol_pattern": "IF SQLCODE = 0",
        "dotnet_equivalent": "// IF converted to Java",
        "context": "Convert IF statement to Java",
        "source_file": "cobol_code.cbl"
      },
      {
        "pattern_type": "business_logic",
        "cobol_pattern": "IF WS-EMP-DEPT = SPACES",
        "dotnet_equivalent": "// IF converted to Java",
        "context": "Convert IF statement to Java",
        "source_file": "cobol_code.cbl"
      },
      {
        "pattern_type": "business_logic",
        "cobol_pattern": "IF WS-EMP-POSITION = SPACES",
        "dotnet_equivalent": "// IF converted to Java",
        "context": "Convert IF statement to Java",
        "source_file": "cobol_code.cbl"
      },
      {
        "pattern_type": "business_logic",
        "cobol_pattern": "IF WS-EMP-SALARY = ZEROES",
        "dotnet_equivalent": "// IF converted to Java",
        "context": "Convert IF statement to Java",
        "source_file": "cobol_code.cbl"
      },
      {
        "pattern_type": "business_logic",
        "cobol_pattern": "PERFORM 8000-CHECK-SQL-STATUS",
        "dotnet_equivalent": "// PERFORM converted to Java",
        "context": "Convert PERFORM statement to Java",
        "source_file": "cobol_code.cbl"
      },
      {
        "pattern_type": "business_logic",
        "cobol_pattern": "IF SQLCODE = 0",
        "dotnet_equivalent": "// IF converted to Java",
        "context": "Convert IF statement to Java",
        "source_file": "cobol_code.cbl"
      },
      {
        "pattern_type": "business_logic",
        "cobol_pattern": "IF SQLCODE = 100",
        "dotnet_equivalent": "// IF converted to Java",
        "context": "Convert IF statement to Java",
        "source_file": "cobol_code.cbl"
      },
      {
        "pattern_type": "business_logic",
        "cobol_pattern": "PERFORM 8000-CHECK-SQL-STATUS",
        "dotnet_equivalent": "// PERFORM converted to Java",
        "context": "Convert PERFORM statement to Java",
        "source_file": "cobol_code.cbl"
      },
      {
        "pattern_type": "business_logic",
        "cobol_pattern": "PERFORM 8000-CHECK-SQL-STATUS.",
        "dotnet_equivalent": "// PERFORM converted to Java",
        "context": "Convert PERFORM statement to Java",
        "source_file": "cobol_code.cbl"
      },
      {
        "pattern_type": "business_logic",
        "cobol_pattern": "IF SQLCODE = 0",
        "dotnet_equivalent": "// IF converted to Java",
        "context": "Convert IF statement to Java",
        "source_file": "cobol_code.cbl"
      },
      {
        "pattern_type": "business_logic",
        "cobol_pattern": "IF WS-CONTINUE-CHOICE = \"Y\" OR WS-CONTINUE-CHOICE = \"y\"",
        "dotnet_equivalent": "// IF converted to Java",
        "context": "Convert IF statement to Java",
        "source_file": "cobol_code.cbl"
      },
      {
        "pattern_type": "business_logic",
        "cobol_pattern": "PERFORM 8000-CHECK-SQL-STATUS",
        "dotnet_equivalent": "// PERFORM converted to Java",
        "context": "Convert PERFORM statement to Java",
        "source_file": "cobol_code.cbl"
      },
      {
        "pattern_type": "business_logic",
        "cobol_pattern": "IF SQLCODE = 0",
        "dotnet_equivalent": "// IF converted to Java",
        "context": "Convert IF statement to Java",
        "source_file": "cobol_code.cbl"
      },
      {
        "pattern_type": "business_logic",
        "cobol_pattern": "IF SQLCODE = 100",
        "dotnet_equivalent": "// IF converted to Java",
        "context": "Convert IF statement to Java",
        "source_file": "cobol_code.cbl"
      },
      {
        "pattern_type": "business_logic",
        "cobol_pattern": "PERFORM 8000-CHECK-SQL-STATUS",
        "dotnet_equivalent": "// PERFORM converted to Java",
        "context": "Convert PERFORM statement to Java",
        "source_file": "cobol_code.cbl"
      },
      {
        "pattern_type": "business_logic",
        "cobol_pattern": "IF SQLCODE < 0",
        "dotnet_equivalent": "// IF converted to Java",
        "context": "Convert IF statement to Java",
        "source_file": "cobol_code.cbl"
      },
      {
        "pattern_type": "business_logic",
        "cobol_pattern": "IF DB-CONNECTED",
        "dotnet_equivalent": "// IF converted to Java",
        "context": "Convert IF statement to Java",
        "source_file": "cobol_code.cbl"
      },
      {
        "pattern_type": "business_logic",
        "cobol_pattern": "PERFORM 8000-CHECK-SQL-STATUS",
        "dotnet_equivalent": "// PERFORM converted to Java",
        "context": "Convert PERFORM statement to Java",
        "source_file": "cobol_code.cbl"
      },
      {
        "pattern_type": "business_logic",
        "cobol_pattern": "IF SQLCODE = 0",
        "dotnet_equivalent": "// IF converted to Java",
        "context": "Convert IF statement to Java",
        "source_file": "cobol_code.cbl"
      }
    ],
    "dependencies": {},
    "cics_patterns": [
      {
        "command_type": "RETURN",
        "dotnet_service": "ITransactionService",
        "microservice_pattern": "Generic Business Service",
        "program": "BANKING.CBL"
      },
      {
        "command_type": "LINK",
        "dotnet_service": "IMediator",
        "microservice_pattern": "Service Orchestrator",
        "program": "BANKING.CBL"
      },
      {
        "command_type": "LINK",
        "dotnet_service": "IMediator",
        "microservice_pattern": "Service Orchestrator",
        "program": "BANKING.CBL"
      },
      {
        "command_type": "",
        "dotnet_service": "",
        "microservice_pattern": "Generic Business Service",
        "program": "BANKING.CBL"
      },
      {
        "command_type": "",
        "dotnet_service": "",
        "microservice_pattern": "Generic Business Service",
        "program": "BANKING.CBL"
      },
      {
        "command_type": "",
        "dotnet_service": "",
        "microservice_pattern": "Generic Business Service",
        "program": "BANKING.CBL"
      },
      {
        "command_type": "READ",
        "dotnet_service": "IRepositoryService",
        "microservice_pattern": "Data Access Service",
        "program": "BANKING.CBL"
      },
      {
        "command_type": "WRITE",
        "dotnet_service": "IRepositoryService",
        "microservice_pattern": "Data Persistence Service",
        "program": "BANKING.CBL"
      },
      {
        "command_type": "READ",
        "dotnet_service": "IRepositoryService",
        "microservice_pattern": "Data Access Service",
        "program": "BANKING.CBL"
      },
      {
        "command_type": "WRITE",
        "dotnet_service": "IRepositoryService",
        "microservice_pattern": "Data Persistence Service",
        "program": "BANKING.CBL"
      },
      {
        "command_type": "WRITE",
        "dotnet_service": "IRepositoryService",
        "microservice_pattern": "Data Persistence Service",
        "program": "BANKING.CBL"
      },
      {
        "command_type": "",
        "dotnet_service": "",
        "microservice_pattern": "Generic Business Service",
        "program": "BANKING.CBL"
      },
      {
        "command_type": "",
        "dotnet_service": "",
        "microservice_pattern": "Generic Business Service",
        "program": "BANKING.CBL"
      },
      {
        "command_type": "",
        "dotnet_service": "",
        "microservice_pattern": "Generic Business Service",
        "program": "BANKING.CBL"
      },
      {
        "command_type": "LINK",
        "dotnet_service": "IMediator",
        "microservice_pattern": "Service Orchestrator",
        "program": "BANKING.CBL"
      },
      {
        "command_type": "WRITEQ_TS",
        "dotnet_service": "ICacheService",
        "microservice_pattern": "Caching Service",
        "program": "BANKING.CBL"
      },
      {
        "command_type": "RECEIVE",
        "dotnet_service": "IRequestService",
        "microservice_pattern": "Request Handler Service",
        "program": "cics.cbl"
      },
      {
        "command_type": "READ",
        "dotnet_service": "IRepositoryService",
        "microservice_pattern": "Data Access Service",
        "program": "cics.cbl"
      },
      {
        "command_type": "SEND",
        "dotnet_service": "IResponseService",
        "microservice_pattern": "Response Service",
        "program": "cics.cbl"
      },
      {
        "command_type": "RETURN",
        "dotnet_service": "ITransactionService",
        "microservice_pattern": "Generic Business Service",
        "program": "cics.cbl"
      }
    ],
    "architecture_recommendations": [
      "Implement Clean Architecture with Domain-Driven Design",
      "Use Entity Framework Core for data persistence",
      "Implement CQRS pattern for read/write separation",
      "Use MediatR for decoupled command/query handling",
      "Implement event sourcing for audit trails",
      "Use decimal type for all financial calculations",
      "Implement strict validation for financial transactions"
    ],
    "project_namespace": "BankingApp",
    "technology_stack": {
      "database_usage": true,
      "messaging_patterns": [],
      "caching_patterns": [
        "Redis",
        "In-Memory Caching"
      ],
      "security_patterns": [
        "JWT Authentication",
        "Role-based Authorization"
      ],
      "recommended_packages": [
        "Microsoft.EntityFrameworkCore",
        "Microsoft.AspNetCore.Authentication.JwtBearer",
        "Swashbuckle.AspNetCore",
        "Serilog.AspNetCore",
        "StackExchange.Redis"
      ]
    }
  },
  "project_files_count": 1,
  "timestamp": "2025-07-11T16:24:50.672111"
}